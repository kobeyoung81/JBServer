<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unosquare.Swan</name>
    </assembly>
    <members>
        <member name="T:Unosquare.Swan.StructEndiannessAttribute">
            <summary>
            An attribute used to help conversion structs back and forth into arrays of bytes via
            extension methods included in this library ToStruct and ToBytes.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Unosquare.Swan.StructEndiannessAttribute.#ctor(Unosquare.Swan.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.StructEndiannessAttribute"/> class.
            </summary>
            <param name="endianness">The endianness.</param>
        </member>
        <member name="P:Unosquare.Swan.StructEndiannessAttribute.Endianness">
            <summary>
            Gets the endianness.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.ArgumentOptionAttribute">
            <summary>
            Models an option specification.
            Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.)
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ArgumentOptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ArgumentOptionAttribute"/> class.
            The default long name will be inferred from target property.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ArgumentOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ArgumentOptionAttribute"/> class.
            </summary>
            <param name="longName">The long name of the option.</param>
        </member>
        <member name="M:Unosquare.Swan.ArgumentOptionAttribute.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ArgumentOptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:Unosquare.Swan.ArgumentOptionAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ArgumentOptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option..</param>
        </member>
        <member name="P:Unosquare.Swan.ArgumentOptionAttribute.LongName">
            <summary>
            Gets long name of this command line option. This name is usually a single English word.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ArgumentOptionAttribute.ShortName">
            <summary>
            Gets a short name of this command line option, made of one character.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ArgumentOptionAttribute.SetName">
            <summary>
            Gets or sets the option's mutually exclusive set name.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ArgumentOptionAttribute.Separator">
            <summary>
            When applying attribute to <see cref="T:System.Collections.Generic.IEnumerable`1"/> target properties,
            it allows you to split an argument and consume its content as a sequence.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ArgumentOptionAttribute.DefaultValue">
            <summary>
            Gets or sets mapped property default value.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ArgumentOptionAttribute.Required">
            <summary>
            Gets or sets a value indicating whether a command line option is required.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ArgumentOptionAttribute.HelpText">
            <summary>
            Gets or sets a short description of this command line option. Usually a sentence summary.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.JsonPropertyAttribute">
            <summary>
            An attribute used to help setup a property behavior when serialize/deserialize JSON.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Unosquare.Swan.JsonPropertyAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.JsonPropertyAttribute" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="ignored">if set to <c>true</c> [ignored].</param>
        </member>
        <member name="P:Unosquare.Swan.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.JsonPropertyAttribute.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Unosquare.Swan.JsonPropertyAttribute"/> is ignored.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.PropertyDisplayAttribute">
            <summary>
            An attribute used to include additional information to a Property for serialization.
            Previously we used DisplayAttribute from DataAnnotation
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Unosquare.Swan.PropertyDisplayAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.PropertyDisplayAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.PropertyDisplayAttribute.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.PropertyDisplayAttribute.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Definitions">
            <summary>
            Contains useful constants and definitions
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Definitions.#cctor">
            <summary>
            Initializes the <see cref="T:Unosquare.Swan.Definitions"/> class.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.Windows1252Encoding">
            <summary>
            The MS Windows codepage 1252 encoding used in some legacy scenarios
            such as default CSV text encoding from Excel
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.CurrentAnsiEncoding">
            <summary>
            The encoding associated with the default ANSI code page in the operating 
            system's regional and language settings
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.DnsDefaultPort">
            <summary>
            The DNS default port
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.NtpDefaultPort">
            <summary>
            The NTP default port
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.SmtpDataCommandTerminator">
            <summary>
            The string sequence that delimits the end of the DATA command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.SmtpGroupableCommandNames">
            <summary>
            Defines the groupable command names according to:
            https://tools.ietf.org/html/rfc2920
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.SmtpStatelessCommandNames">
            <summary>
            The stateless command names (i.e. the commands that don't require initiation from the client)
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Definitions.SmtpAuthMethods">
            <summary>
            Lists the AUTH methods supported by default.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.SmtpAuthMethods.Plain">
            <summary>
            The plain method
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.SmtpAuthMethods.Login">
            <summary>
            The login method
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.BasicTypesInfo">
            <summary>
            The basic types information
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllBasicTypes">
            <summary>
            Contains all basic types, including string, date time, and all of their nullable counterparts
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllNumericTypes">
            <summary>
            Gets all numeric types including their nullable counterparts. 
            Note that Booleans and Guids are not considered numeric types
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllNumericValueTypes">
            <summary>
            Gets all numeric types without their nullable counterparts. 
            Note that Booleans and Guids are not considered numeric types
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllBasicValueTypes">
            <summary>
            Contains all basic value types. i.e. excludes string and nullables
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllBasicValueAndStringTypes">
            <summary>
            Contains all basic value types including the string type. i.e. excludes nullables
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllBasicNullableValueTypes">
            <summary>
            Gets all nullable value types. i.e. excludes string and all basic value types
            </summary>
        </member>
        <member name="T:Unosquare.Swan.OperatingSystem">
            <summary>
            Enumeration of Operating Systems
            </summary>
        </member>
        <member name="F:Unosquare.Swan.OperatingSystem.Unknown">
            <summary>
            Unknown OS
            </summary>
        </member>
        <member name="F:Unosquare.Swan.OperatingSystem.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:Unosquare.Swan.OperatingSystem.Unix">
            <summary>
            UNIX/Linux
            </summary>
        </member>
        <member name="F:Unosquare.Swan.OperatingSystem.Osx">
            <summary>
            Mac OSX
            </summary>
        </member>
        <member name="T:Unosquare.Swan.AppWorkerState">
            <summary>
            Enumerates the different Application Worker States
            </summary>
        </member>
        <member name="F:Unosquare.Swan.AppWorkerState.Stopped">
            <summary>
            The stopped
            </summary>
        </member>
        <member name="F:Unosquare.Swan.AppWorkerState.Running">
            <summary>
            The running
            </summary>
        </member>
        <member name="T:Unosquare.Swan.ConnectionDataReceivedTrigger">
            <summary>
            Enumerates the possible causes of the DataReceived event occurring.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.ConnectionDataReceivedTrigger.Flush">
            <summary>
            The trigger was a forceful flush of the buffer
            </summary>
        </member>
        <member name="F:Unosquare.Swan.ConnectionDataReceivedTrigger.NewLineSequenceEncountered">
            <summary>
            The new line sequence bytes were received
            </summary>
        </member>
        <member name="F:Unosquare.Swan.ConnectionDataReceivedTrigger.BufferFull">
            <summary>
            The buffer was full
            </summary>
        </member>
        <member name="F:Unosquare.Swan.ConnectionDataReceivedTrigger.BlockSizeReached">
            <summary>
            The block size reached
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Endianness">
            <summary>
            Defines Endianness, big or little
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Endianness.Big">
            <summary>
            In big endian, you store the most significant byte in the smallest address. 
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Endianness.Little">
            <summary>
            In little endian, you store the least significant byte in the smallest address.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.DnsRecordType">
            <summary>
            Enumerates the different DNS record types
            </summary>
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.A">
            <summary>
            A records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.NS">
            <summary>
            Nameserver records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.CNAME">
            <summary>
            CNAME records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.SOA">
            <summary>
            SOA records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.WKS">
            <summary>
            WKS records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.PTR">
            <summary>
            PTR records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.MX">
            <summary>
            MX records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.TXT">
            <summary>
            TXT records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.AAAA">
            <summary>
            A records fot IPv6
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.SRV">
            <summary>
            SRV records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordType.ANY">
            <summary>
            ANY records
            </summary> 
        </member>
        <member name="T:Unosquare.Swan.DnsRecordClass">
            <summary>
            Enumerates the different DNS record classes
            </summary>
        </member>
        <member name="F:Unosquare.Swan.DnsRecordClass.IN">
            <summary>
            IN records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsRecordClass.ANY">
            <summary>
            ANY records
            </summary> 
        </member>
        <member name="T:Unosquare.Swan.DnsOperationCode">
            <summary>
            Enumerates the different DNS operation codes
            </summary>
        </member>
        <member name="F:Unosquare.Swan.DnsOperationCode.Query">
            <summary>
            Query operation
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsOperationCode.IQuery">
            <summary>
            IQuery operation
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsOperationCode.Status">
            <summary>
            Status operation
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsOperationCode.Notify">
            <summary>
            Notify operation
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsOperationCode.Update">
            <summary>
            Update operation
            </summary> 
        </member>
        <member name="T:Unosquare.Swan.DnsResponseCode">
            <summary>
            Enumerates the different DNS query response codes
            </summary>
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.NoError">
            <summary>
            No error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.FormatError">
            <summary>
            No error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.ServerFailure">
            <summary>
            Format error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.NameError">
            <summary>
            Server failure error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.NotImplemented">
            <summary>
            Name error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.Refused">
            <summary>
            Not implemented error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.YXDomain">
            <summary>
            Refused error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.YXRRSet">
            <summary>
            YXRR error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.NXRRSet">
            <summary>
            NXRR Set error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.NotAuth">
            <summary>
            Not authorized error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.DnsResponseCode.NotZone">
            <summary>
            Not zone error
            </summary> 
        </member>
        <member name="T:Unosquare.Swan.SmtpStatusCode">
            <summary>
            Defines the different SMTP status codes
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.SystemStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.HelpMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.ServiceReady">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.ServiceClosingTransmissionChannel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.Ok">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.UserNotLocalWillForward">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.CannotVerifyUserWillAttemptDelivery">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.StartMailInput">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.ServiceNotAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.MailboxBusy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.LocalErrorInProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.InsufficientStorage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.ClientNotPermitted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.CommandUnrecognized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.SyntaxError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.CommandNotImplemented">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.BadCommandSequence">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.MustIssueStartTlsFirst">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.CommandParameterNotImplemented">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.MailboxUnavailable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.UserNotLocalTryAlternatePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.ExceededStorageAllocation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.MailboxNameNotAllowed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.TransactionFailed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpStatusCode.GeneralFailure">
            <summary>
            
            </summary>
        </member>
        <member name="T:Unosquare.Swan.SmtpCommandNames">
            <summary>
            Enumerates all of the well-known SMTP command names.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.Unknown">
            <summary>
            An unknown command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.HELO">
            <summary>
            The helo command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.EHLO">
            <summary>
            The ehlo command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.QUIT">
            <summary>
            The quit command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.HELP">
            <summary>
            The help command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.NOOP">
            <summary>
            The noop command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.RSET">
            <summary>
            The rset command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.MAIL">
            <summary>
            The mail command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.DATA">
            <summary>
            The data command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.SEND">
            <summary>
            The send command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.SOML">
            <summary>
            The soml command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.SAML">
            <summary>
            The saml command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.RCPT">
            <summary>
            The RCPT command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.VRFY">
            <summary>
            The vrfy command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.EXPN">
            <summary>
            The expn command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.STARTTLS">
            <summary>
            The starttls command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpCommandNames.AUTH">
            <summary>
            The authentication command
            </summary>
        </member>
        <member name="T:Unosquare.Swan.SmtpReplyCodeSeverities">
            <summary>
            Enumerates the reply code severities
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeSeverities.Unknown">
            <summary>
            The unknown severity
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeSeverities.PositiveCompletion">
            <summary>
            The positive completion severity
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeSeverities.PositiveIntermediate">
            <summary>
            The positive intermediate severity
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeSeverities.TransientNegative">
            <summary>
            The transient negative severity
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeSeverities.PermanentNegative">
            <summary>
            The permanent negative severity
            </summary>
        </member>
        <member name="T:Unosquare.Swan.SmtpReplyCodeCategories">
            <summary>
            Enumerates the reply code categories
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeCategories.Unknown">
            <summary>
            The unknown category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeCategories.Syntax">
            <summary>
            The syntax category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeCategories.Information">
            <summary>
            The information category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeCategories.Connections">
            <summary>
            The connections category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeCategories.UnspecifiedA">
            <summary>
            The unspecified a category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeCategories.UnspecifiedB">
            <summary>
            The unspecified b category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.SmtpReplyCodeCategories.System">
            <summary>
            The system category
            </summary>
        </member>
        <member name="T:Unosquare.Swan.TerminalWriters">
            <summary>
            Defines a set of bitwise standard terminal writers
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.None">
            <summary>
            Prevents output
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.StandardOutput">
            <summary>
            Writes to the Console.Out
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.StandardError">
            <summary>
            Writes to the Console.Error
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.Diagnostics">
            <summary>
            Writes to the System.Diagnostics.Debug
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.All">
            <summary>
            Writes to all possible terminal writers
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.ErrorAndDebug">
            <summary>
            The error and debug writers
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.OutputAndDebug">
            <summary>
            The output and debug writers
            </summary>
        </member>
        <member name="T:Unosquare.Swan.LogMessageType">
            <summary>
            Defines the bitwise flags to determine
            which types of messages get printed on the current console
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.None">
            <summary>
            The none message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Info">
            <summary>
            The information message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Debug">
            <summary>
            The debug message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Trace">
            <summary>
            The trace message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Error">
            <summary>
            The error message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Warning">
            <summary>
            The warning message type
            </summary>
        </member>
        <member name="T:Unosquare.Swan.ConnectionAcceptedEventArgs">
            <summary>
            The event arguments for when connections are accepted
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Unosquare.Swan.ConnectionAcceptedEventArgs.Client">
            <summary>
            Gets the client.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ConnectionAcceptedEventArgs.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionAcceptedEventArgs"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="T:Unosquare.Swan.ConnectionAcceptingEventArgs">
            <summary>
            Occurs before a connection is accepted. Set the Cancel property to true to prevent the connection from being accepted.
            </summary>
            <seealso cref="T:Unosquare.Swan.ConnectionAcceptedEventArgs" />
        </member>
        <member name="P:Unosquare.Swan.ConnectionAcceptingEventArgs.Cancel">
            <summary>
            Setting Cancel to true rejects the new TcpClient
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ConnectionAcceptingEventArgs.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionAcceptingEventArgs"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="T:Unosquare.Swan.ConnectionListenerStartedEventArgs">
            <summary>
            Event arguments for when a server listener is started
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerStartedEventArgs.EndPoint">
            <summary>
            Gets the end point.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ConnectionListenerStartedEventArgs.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionListenerStartedEventArgs"/> class.
            </summary>
            <param name="listenerEndPoint">The listener end point.</param>
        </member>
        <member name="T:Unosquare.Swan.ConnectionListenerFailedEventArgs">
            <summary>
            Event arguments for when a server listener fails to start
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerFailedEventArgs.EndPoint">
            <summary>
            Gets the end point.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerFailedEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ConnectionListenerFailedEventArgs.#ctor(System.Net.IPEndPoint,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionListenerFailedEventArgs"/> class.
            </summary>
            <param name="listenerEndPoint">The listener end point.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Unosquare.Swan.ConnectionListenerStoppedEventArgs">
            <summary>
            Event arguments for when a server listener stopped
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerStoppedEventArgs.EndPoint">
            <summary>
            Gets the end point.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerStoppedEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ConnectionListenerStoppedEventArgs.#ctor(System.Net.IPEndPoint,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionListenerFailedEventArgs"/> class.
            </summary>
            <param name="listenerEndPoint">The listener end point.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Unosquare.Swan.LogMessageReceivedEventArgs">
            <summary>
            Event arguments representing the message that is logged
            on to the terminal. Use the properties to forward the data to
            your logger of choice.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.Swan.LogMessageReceivedEventArgs.#ctor(System.UInt64,Unosquare.Swan.LogMessageType,System.DateTime,System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.LogMessageReceivedEventArgs" /> class.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="messageType">Type of the message.</param>
            <param name="utcDate">The UTC date.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.Sequence">
            <summary>
            Gets logging message sequence.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.MessageType">
            <summary>
            Gets the type of the message.
            It can be a combination as the enumeration is a set of bitwise flags
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.UtcDate">
            <summary>
            Gets the UTC date at which the event at which the message was logged.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.Source">
            <summary>
            Gets the name of the source where the logging message
            came from. This can come empty if the logger did not set it.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.Message">
            <summary>
            Gets the body of the message.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.CallerMemberName">
            <summary>
            Gets the name of the caller member.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.CallerFilePath">
            <summary>
            Gets the caller file path.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.CallerLineNumber">
            <summary>
            Gets the caller line number.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.ExtendedData">
            <summary>
            Gets an object representing extended data.
            It could be an exception or anything else
            </summary>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.Exception">
            <summary>
            Gets the Extended Data properties cast as an Exception (if possible)
            Otherwise, it return null
            </summary>
        </member>
        <member name="T:Unosquare.Swan.LogMessageDisplayingEventArgs">
            <summary>
            Event arguments representing a message logged and about to be
            displayed on the terminal (console). Set the CancelOutput property in the
            event handler to prevent the terminal from displaying the message.
            </summary>
            <seealso cref="T:Unosquare.Swan.LogMessageReceivedEventArgs" />
        </member>
        <member name="M:Unosquare.Swan.LogMessageDisplayingEventArgs.#ctor(Unosquare.Swan.LogMessageReceivedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.LogMessageDisplayingEventArgs"/> class.
            </summary>
            <param name="data">The <see cref="T:Unosquare.Swan.LogMessageReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Unosquare.Swan.LogMessageDisplayingEventArgs.CancelOutput">
            <summary>
            Gets or sets a value indicating whether the displaying of the
            logging message should be canceled.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.ConnectionFailureEventArgs">
            <summary>
            The event arguments for connection failure events
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Unosquare.Swan.ConnectionFailureEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ConnectionFailureEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionFailureEventArgs"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Unosquare.Swan.ConnectionDataReceivedEventArgs">
            <summary>
            Event arguments for when data is received.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Unosquare.Swan.ConnectionDataReceivedEventArgs.Buffer">
            <summary>
            Gets the buffer.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ConnectionDataReceivedEventArgs.Trigger">
            <summary>
            Gets the cause as to why this event was thrown
            </summary>
        </member>
        <member name="P:Unosquare.Swan.ConnectionDataReceivedEventArgs.HasMoreAvailable">
            <summary>
            Gets a value indicating whether the receive buffer has more bytes available
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ConnectionDataReceivedEventArgs.#ctor(System.Byte[],Unosquare.Swan.ConnectionDataReceivedTrigger,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionDataReceivedEventArgs"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="trigger">The trigger.</param>
            <param name="moreAvailable">if set to <c>true</c> [more available].</param>
        </member>
        <member name="M:Unosquare.Swan.ConnectionDataReceivedEventArgs.GetStringFromBuffer(System.Byte[],System.Text.Encoding)">
            <summary>
            Gets the string from the given buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.ConnectionDataReceivedEventArgs.GetStringFromBuffer(System.Text.Encoding)">
            <summary>
            Gets the string from buffer.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.AppWorkerStateChangedEventArgs">
            <summary>
            Represents event arguments whenever the state of an application service changes
            </summary>
        </member>
        <member name="P:Unosquare.Swan.AppWorkerStateChangedEventArgs.NewState">
            <summary>
            Gets the state to which the application service changed.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.AppWorkerStateChangedEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.AppWorkerStateChangedEventArgs.#ctor(Unosquare.Swan.AppWorkerState,Unosquare.Swan.AppWorkerState)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.AppWorkerStateChangedEventArgs" /> class.
            </summary>
            <param name="oldState">The old state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="T:Unosquare.Swan.DependencyContainerResolutionException">
            <summary>
            An exception for dependency resolutions
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerResolutionException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerResolutionException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Unosquare.Swan.DependencyContainerRegistrationTypeException">
            <summary>
            Registration Type Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerRegistrationTypeException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerRegistrationTypeException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerRegistrationTypeException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerRegistrationTypeException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Unosquare.Swan.DependencyContainerRegistrationException">
            <summary>
            Generic Constraint Registration Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerRegistrationException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerRegistrationException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerRegistrationException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerRegistrationException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerRegistrationException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="implementationType">Type of the implementation.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerRegistrationException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="implementationType">Type of the implementation.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Unosquare.Swan.DependencyContainerWeakReferenceException">
            <summary>
            Weak Reference Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerWeakReferenceException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerWeakReferenceException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerWeakReferenceException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerWeakReferenceException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Unosquare.Swan.DependencyContainerConstructorResolutionException">
            <summary>
            Constructor Resolution Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerConstructorResolutionException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerConstructorResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerConstructorResolutionException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerConstructorResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerConstructorResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerConstructorResolutionException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerConstructorResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerConstructorResolutionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Unosquare.Swan.DependencyContainerAutoRegistrationException">
            <summary>
            Auto-registration Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerAutoRegistrationException.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerAutoRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerAutoRegistrationException.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DependencyContainerAutoRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="types">The types.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Unosquare.Swan.DependencyContainerAutoRegistrationException.GetTypesString(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the types string.
            </summary>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.MessageHubSubscriptionException">
            <summary>
            Thrown when an exceptions occurs while subscribing to a message type
            </summary>
        </member>
        <member name="M:Unosquare.Swan.MessageHubSubscriptionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.MessageHubSubscriptionException"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Unosquare.Swan.MessageHubSubscriptionException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.MessageHubSubscriptionException"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="reason">The reason.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Unosquare.Swan.DnsQueryException">
            <summary>
            An exception thrown when the DNS query fails.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Unosquare.Swan.SmtpException">
            <summary>
            Defines an SMTP Exceptions class
            </summary>
        </member>
        <member name="M:Unosquare.Swan.SmtpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.SmtpException"/> class with a message.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.SmtpException.#ctor(Unosquare.Swan.SmtpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.SmtpException"/> class.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Extensions">
            <summary>
            Provides various extension methods
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToLowerHex(System.Byte[],System.Boolean)">
            <summary>
            Converts an array of bytes to its lower-case, hexadecimal representation
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="addPrefix">if set to <c>true</c> add the 0x prefix tot he output.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToUpperHex(System.Byte[],System.Boolean)">
            <summary>
            Converts an array of bytes to its upper-case, hexadecimal representation
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="addPrefix">if set to <c>true</c> [add prefix].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToDashedHex(System.Byte[])">
            <summary>
            Converts an array of bytes to a sequence of dash-separated, hexadecimal,
            uppercase characters
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToBase64(System.Byte[])">
            <summary>
            Converts an array of bytes to a base-64 encoded string
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ConvertHexadecimalToBytes(System.String)">
            <summary>
            Converts a set of hexadecimal characters (uppercase or lowercase)
            to a byte array. String length must be a multiple of 2 and 
            any prefix (such as 0x) has to be avoided for this to work properly
            </summary>
            <param name="hex">The hexadecimal.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetBitValueAt(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the bit value at the given offset.
            </summary>
            <param name="b">The b.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetBitValueAt(System.Byte,System.Byte)">
            <summary>
            Gets the bit value at the given offset.
            </summary>
            <param name="b">The b.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.SetBitValueAt(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the bit value at the given offset.
            </summary>
            <param name="b">The b.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.SetBitValueAt(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the bit value at the given offset.
            </summary>
            <param name="b">The b.</param>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Split(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Splits a byte array delimited by the specified sequence of bytes.
            Each individual element in the result will contain the split sequence terminator if it is found to be delimited by it.
            For example if you split [1,2,3,4] by a sequence of [2,3] this method will return a list with 2 byte arrays, one containing [1,2,3] and the
            second one containing 4. Use the Trim extension methods to remove terminator sequences.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset at which to start splitting bytes. Any bytes befor this will be discarded.</param>
            <param name="sequence">The sequence.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            buffer
            or
            sequence
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.DeepClone(System.Byte[])">
            <summary>
            Colones the specified buffer, byte by byte
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.TrimStart(System.Byte[],System.Byte[])">
            <summary>
            Removes the specified sequence from the start of the buffer if the buffer begins with such sequence
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.TrimEnd(System.Byte[],System.Byte[])">
            <summary>
            Removes the specified sequence from the end of the buffer if the buffer ends with such sequence
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Trim(System.Byte[],System.Byte[])">
            <summary>
            Removes the specified sequence from the end and the start of the buffer 
            if the buffer ends and/or starts with such sequence
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.EndsWith(System.Byte[],System.Byte[])">
            <summary>
            Determines if the specified buffer ends with the given sequence of bytes
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.StartsWith(System.Byte[],System.Byte[])">
            <summary>
            Determines if the specified buffer starts with the given sequence of bytes
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Contains(System.Byte[],System.Byte[])">
            <summary>
            Determines whether the buffer contains the specified sequence
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsEqualTo(System.Byte[],System.Byte[])">
            <summary>
            Determines whether the buffer exactly matches, byte by byte the specified sequence.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetIndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Returns the first instance of the matched sequence based on the given offset.
            If nomatches are found then this method returns -1
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Append(System.IO.MemoryStream,System.Byte[])">
            <summary>
            Appends the Memory Stream with the specified buffer.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Append(System.IO.MemoryStream,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Appends the Memory Stream with the specified buffer.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Append(System.IO.MemoryStream,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Appends the Memory Stream with the specified set of buffers.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffers">The buffers.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToText(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts an array of bytes into text with the specified encoding
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToText(System.Byte[])">
            <summary>
            Converts an array of bytes into text with UTF8 encoding
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves a sub-array from the specified <paramref name="array"/>. A sub-array starts at
            the specified element position in <paramref name="array"/>.
            </summary>
            <returns>
            An array of T that receives a sub-array, or an empty array of T if any problems with
            the parameters.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            An <see cref="T:System.Int32"/> that represents the zero-based starting position of
            a sub-array in <paramref name="array"/>.
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that represents the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
        </member>
        <member name="M:Unosquare.Swan.Extensions.SubArray``1(``0[],System.Int64,System.Int64)">
            <summary>
            Retrieves a sub-array from the specified <paramref name="array"/>. A sub-array starts at
            the specified element position in <paramref name="array"/>.
            </summary>
            <returns>
            An array of T that receives a sub-array, or an empty array of T if any problems with
            the parameters.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int64"/> that represents the zero-based starting position of
            a sub-array in <paramref name="array"/>.
            </param>
            <param name="length">
            A <see cref="T:System.Int64"/> that represents the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ReadBytesAsync(System.IO.Stream,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads the bytes asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="length">The length.</param>
            <param name="bufferLength">Length of the buffer.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ReadBytesAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads the bytes asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="length">The length.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyPropertiesTo``1(``0,System.Object)">
            <summary>
            Iterates over the public, instance, readable properties of the source and
            tries to write a compatible value to a public, instance, writable property in the destination
            This method only supports basic types and it is not multi level
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyPropertiesTo(System.Object,System.Object,System.String[])">
            <summary>
            Iterates over the public, instance, readable properties of the source and
            tries to write a compatible value to a public, instance, writable property in the destination
            This method only supports basic types and it is not multi level
            </summary>
            <param name="source">The source.</param>
            <param name="target">The destination.</param>
            <param name="ignoreProperties">The ignore properties.</param>
            <returns>Returns the number of properties that were successfully copied</returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyPropertiesToNew``1(System.Object,System.String[])">
            <summary>
            Copies the properties to new.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="ignoreProperties">The ignore properties.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyPropertiesTo(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.String[])">
            <summary>
            Iterates over the keys of the source and tries to write a compatible value to a public, 
            instance, writable property in the destination.
            
            This method only supports basic types and it is not multi level
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="ignoreProperties">The ignore properties.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Benchmark(System.Action)">
            <summary>
            Measures the elapsed time of the given action as a TimeSpan
            This method uses a high precision Stopwatch.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Retry(System.Action,System.TimeSpan,System.Int32)">
            <summary>
            Does the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="retryCount">The retry count.</param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Retry``1(System.Func{``0},System.TimeSpan,System.Int32)">
            <summary>
            Does the specified action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="retryCount">The retry count.</param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ExceptionMessage(System.Exception,System.String)">
            <summary>
            Retrieves the exception message, plus all the inner exception messages separated by new lines
            </summary>
            <param name="ex">The ex.</param>
            <param name="priorMessage">The prior message.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToSortableDate(System.DateTime)">
            <summary>
            Converts the date to a YYYY-MM-DD string
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToSortableDateTime(System.DateTime)">
            <summary>
            Converts the date to a YYYY-MM-DD HH:II:SS string
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToDateTime(System.String)">
            <summary>
            Parses a YYYY-MM-DD and optionally it time part, HH:II:SS into a DateTime
            </summary>
            <param name="sortableDate">The sortable date.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">sortableDate</exception>
            <exception cref="T:System.Exception">
            </exception>
            <exception cref="T:System.ArgumentException">Unable to parse sortable date and time. - sortableDate</exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.DateRange(System.DateTime,System.DateTime)">
            <summary>
            Creates a date's range.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.RoundUp(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds up a date to match a timespan.
            </summary>
            <param name="dt">The datetime.</param>
            <param name="d">The timespan to match.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToUnixEpochDate(System.DateTime)">
            <summary>
            Get this datetime as a Unix epoch timestamp (seconds since Jan 1, 1970, midnight UTC).
            </summary>
            <param name="date">The date to convert.</param>
            <returns>Seconds since Unix epoch.</returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsPrivateAddress(System.Net.IPAddress)">
            <summary>
            Determines whether the IP address is private
            </summary>
            <param name="address">The IP address.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToUInt32(System.Net.IPAddress)">
            <summary>
            Converts an IPv4 Address to its Unsigned, 32-bit integer representation.
            </summary>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetAllTypes(System.Reflection.Assembly)">
            <summary>
            Gets all types within an assembly in a safe manner.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetDefault(System.Type)">
            <summary>
            The closest programmatic equivalent of default(T)
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsCollection(System.Type)">
            <summary>
            Determines whether this type is compatible with ICollection.
            </summary>
            <param name="sourceType">The type.</param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[],System.Type[])">
            <summary>
            Gets a method from a type given the method name, binding flags, generic types and parameter types
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="methodName">Name of the method.</param>
            <param name="genericTypes">The generic types.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns></returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsClass(System.Type)">
            <summary>
            Determines whether this instance is class.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsAbstract(System.Type)">
            <summary>
            Determines whether this instance is abstract.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is abstract; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsInterface(System.Type)">
            <summary>
            Determines whether this instance is interface.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsPrimitive(System.Type)">
            <summary>
            Determines whether this instance is primitive.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is primitive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsValueType(System.Type)">
            <summary>
            Determines whether [is value type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is value type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsGenericType(System.Type)">
            <summary>
            Determines whether [is generic type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is generic type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsGenericParameter(System.Type)">
            <summary>
            Determines whether [is generic parameter].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is generic parameter] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsDefined(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified attribute type is defined.
            </summary>
            <param name="type">The type.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
              <c>true</c> if the specified attribute type is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes.
            </summary>
            <param name="type">The type.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsGenericTypeDefinition(System.Type)">
            <summary>
            Determines whether [is generic type definition].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is generic type definition] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.BaseType(System.Type)">
            <summary>
            Bases the type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Assembly(System.Type)">
            <summary>
            Assemblies the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsIEnumerable(System.Type)">
            <summary>
            Determines whether [is i enumerable request].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is i enumerable request] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ComputeMD5(System.IO.Stream,System.Boolean)">
            <summary>
            Computes the MD5 hash of the given stream.
            Do not use for large streams as this reads ALL bytes at once
            </summary>
            <param name="stream">The stream.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ComputeMD5(System.String,System.Boolean)">
            <summary>
            Computes the MD5 hash of the given string using UTF8 byte encoding.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ComputeMD5(System.Byte[],System.Boolean)">
            <summary>
            Computes the MD5 hash of the given byte array.
            </summary>
            <param name="data">The data.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ComputeSha1(System.String,System.Boolean)">
            <summary>
            Computes the SHA-1 hash of the given string using UTF8 byte encoding.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ComputeSha256(System.String,System.Boolean)">
            <summary>
            Computes the SHA-256 hash of the given string using UTF8 byte encoding.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ComputeSha512(System.String,System.Boolean)">
            <summary>
            Computes the SHA-512 hash of the given string using UTF8 byte encoding.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToStringInvariant(System.Object)">
            <summary>
            Returns a string that represents the given item
            It tries to use InvariantCulture if the ToString(IFormatProvider)
            overload exists.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToStringInvariant``1(``0)">
            <summary>
            Returns a string that represents the given item
            It tries to use InvariantCulture if the ToString(IFormatProvider)
            overload exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.RemoveControlCharsExcept(System.String,System.Char[])">
            <summary>
            Removes the control characters from a string except for those specified.
            </summary>
            <param name="input">The input.</param>
            <param name="excludeChars">When specified, these characters will not be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.RemoveControlChars(System.String)">
            <summary>
            Removes all control characters from a string, including new line sequences.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.HumanizeJson(System.Object,System.Int32)">
            <summary>
            Humanizes a JSON serialization result.
            jsonResult has to be a Dictionary[string,object] or List[object]
            </summary>
            <param name="jsonResult">The json result.</param>
            <param name="indent">The indent.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToJson(System.Object,System.Boolean)">
            <summary>
            Outputs JSON string representing this object
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> format the output.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Stringify(System.Object)">
            <summary>
            Returns text representing the properties of the specified object in a human-readable format.
            While this method is fairly expensive computationally speaking, it provides an easy way to
            examine objects.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves a section of the string, inclusive of both, the start and end indexes.
            This behavior is unlike JavaScript's Slice behavior where the end index is non-inclusive
            If the string is null it returns an empty string
            </summary>
            <param name="str">The string.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.SliceLength(System.String,System.Int32,System.Int32)">
            <summary>
            Gets a part of the string clamping the length and startIndex parameters to safe values.
            If the string is null it returns an empty string. This is basically just a safe version
            of string.Substring
            </summary>
            <param name="str">The string.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToLines(System.String)">
            <summary>
            Splits the specified text into r, n or rn separated lines
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Humanize(System.String)">
            <summary>
            Humanizes (make more human-readable) an identifier-style string 
            in either camel case or snake case. For example, CamelCase will be converted to 
            Camel Case and Snake_Case will be converted to Snake Case.
            </summary>
            <param name="identifierString">The identifier-style string.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Indent(System.String,System.Int32)">
            <summary>
            Indents the specified multi-line text with the given amount of leading spaces
            per line.
            </summary>
            <param name="text">The text.</param>
            <param name="spaces">The spaces.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.TextPositionAt(System.String,System.Int32)">
            <summary>
            Gets the line and column number (i.e. not index) of the
            specified character index. Useful to locate text in a multi-line
            string the same way a text editor does.
            Please not that the tuple contains first the line number and then the
            column number
            </summary>
            <param name="str">The string.</param>
            <param name="charIndex">Index of the character.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToSafeFilename(System.String)">
            <summary>
            Makes the file name system safe.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.FormatBytes(System.Int64)">
            <summary>
            Formats a long into the closest bytes string.
            </summary>
            <param name="bytes">The bytes length</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.FormatBytes(System.UInt64)">
            <summary>
            Formats a long into the closest bytes string.
            </summary>
            <param name="bytes">The bytes length</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="maximumLength">The maximum length.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Contains(System.String,System.Char[])">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> contains any of characters in
            the specified array of <see cref="T:System.Char"/>.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> contains any of <paramref name="chars"/>;
            otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
            <param name="chars">
            An array of <see cref="T:System.Char"/> that contains characters to find.
            </param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the specified value between the minimum and the maximum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.IsBetween``1(``0,``0,``0)">
            <summary>
            Determines whether the specified value is between a minimum and a maximum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified minimum is between; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.SwapEndianness(System.UInt64)">
            <summary>
            Swaps the endianness of an unsigned long to an unsigned integer.
            </summary>
            <param name="longBytes">The bytes contained in a long.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetStructBytes``1(System.Byte[])">
            <summary>
            Adjusts the endianness of the type represented by the data byte array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToStruct``1(System.Byte[])">
            <summary>
            Converts an array of bytes into the given struct type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToStruct``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts an array of bytes into the given struct type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ToBytes``1(``0)">
            <summary>
            Converts a struct to an array of bytes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Network">
            <summary>
            Provides miscellaneous network utilities such as a Public IP finder,
            a DNS client to query DNS records of any kind, and an NTP client.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Network.HostName">
            <summary>
            Gets the name of the host.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Network.DomainName">
            <summary>
            Gets the name of the domain.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4Interfaces">
            <summary>
            Gets the active IPv4 interfaces.
            Only those interfaces with a valid unicast address and a valid gateway will be returned in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4Addresses(System.Boolean)">
            <summary>
            Retrieves the local ip addresses.
            </summary>
            <param name="includeLoopback">if set to <c>true</c> [include loopback].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4Addresses(System.Net.NetworkInformation.NetworkInterfaceType)">
            <summary>
            Retrieves the local IP addresses.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4Addresses(System.Net.NetworkInformation.NetworkInterfaceType,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the local ip addresses.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="skipTypeFilter">if set to <c>true</c> [skip type filter].</param>
            <param name="includeLoopback">if set to <c>true</c> [include loopback].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetPublicIPAddressAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the public IP address using ipify.org.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetPublicIPAddress">
            <summary>
            Gets the public IP address using ipify.org.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4DnsServers">
            <summary>
            Gets the configured IPv4 DNS servers for the active network interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsHostEntry(System.String)">
            <summary>
            Gets the DNS host entry (a list of IP addresses) for the domain name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsHostEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the DNS host entry (a list of IP addresses) for the domain name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <param name="ct">The ct.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsHostEntry(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Gets the DNS host entry (a list of IP addresses) for the domain name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsHostEntryAsync(System.String,System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the DNS host entry (a list of IP addresses) for the domain name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsPointerEntry(System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
            <summary>
            Gets the reverse lookup FQDN of the given IP Address.
            </summary>
            <param name="query">The query.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsPointerEntryAsync(System.Net.IPAddress,System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the reverse lookup FQDN of the given IP Address.
            </summary>
            <param name="query">The query.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <param name="ct">The ct.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsPointerEntry(System.Net.IPAddress)">
            <summary>
            Gets the reverse lookup FQDN of the given IP Address.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsPointerEntryAsync(System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Gets the reverse lookup FQDN of the given IP Address.
            </summary>
            <param name="query">The query.</param>
            <param name="ct">The ct.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.QueryDns(System.String,Unosquare.Swan.DnsRecordType,System.Net.IPAddress,System.Int32)">
            <summary>
            Queries the DNS server for the specified record type.
            </summary>
            <param name="query">The query.</param>
            <param name="recordType">Type of the record.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.QueryDnsAsync(System.String,Unosquare.Swan.DnsRecordType,System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Queries the DNS server for the specified record type.
            </summary>
            <param name="query">The query.</param>
            <param name="recordType">Type of the record.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <param name="ct">The ct.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.QueryDns(System.String,Unosquare.Swan.DnsRecordType)">
            <summary>
            Queries the DNS server for the specified record type.
            </summary>
            <param name="query">The query.</param>
            <param name="recordType">Type of the record.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.QueryDnsAsync(System.String,Unosquare.Swan.DnsRecordType,System.Threading.CancellationToken)">
            <summary>
            Queries the DNS server for the specified record type.
            </summary>
            <param name="query">The query.</param>
            <param name="recordType">Type of the record.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetNetworkTimeUtc(System.Net.IPAddress,System.Int32)">
            <summary>
            Gets the UTC time by querying from an NTP server
            </summary>
            <param name="ntpServerAddress">The NTP server address.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetNetworkTimeUtc(System.String,System.Int32)">
            <summary>
            Gets the UTC time by querying from an NTP server
            </summary>
            <param name="ntpServerName">The NTP server, by default pool.ntp.org.</param>
            <param name="port">The port, by default NTP 123.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetNetworkTimeUtcAsync(System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the UTC time by querying from an NTP server
            </summary>
            <param name="ntpServerAddress">The NTP server address.</param>
            <param name="port">The port.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetNetworkTimeUtcAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the UTC time by querying from an NTP server
            </summary>
            <param name="ntpServerName">Name of the NTP server.</param>
            <param name="port">The port.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Runtime">
            <summary>
            Provides utility methods to retrieve information about the current application
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.OS">
            <summary>
            Gets the current Operating System.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.Process">
            <summary>
            Gets the process associated with the current application.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.IsTheOnlyInstance">
            <summary>
            Checks if this application (including version number) is the only instance currently running.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.IsUsingMonoRuntime">
            <summary>
            Gets a value indicating whether this application instance is using the Mono runtime.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.EntryAssembly">
            <summary>
            Gets the assembly that started the application.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.EntryAssemblyName">
            <summary>
            Gets the name of the entry assembly.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.EntryAssemblyVersion">
            <summary>
            Gets the entry assembly version.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.EntryAssemblyDirectory">
            <summary>
            Gets the full path to the folder containing the assembly that started the application.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.CompanyName">
            <summary>
            Gets the name of the company.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.ProductName">
            <summary>
            Gets the name of the product.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.ProductTrademark">
            <summary>
            Gets the trademark.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.LocalStoragePath">
            <summary>
            Gets a local storage path with a version
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.Container">
            <summary>
            Provides a simple IoC Container based on TinyIoC
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.Messages">
            <summary>
            Provides a Message Hub with the Publish/Subscribe pattern
            The implementation is based on TinyIoC Messenger
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.ArgumentParser">
            <summary>
            Gets the singleton instance created with basic defaults.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.ObjectMapper">
            <summary>
            Gets the object mapper instance created with basic defaults.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Runtime.WriteWelcomeBanner(System.ConsoleColor)">
            <summary>
            Writes a standard banner to the standard output
            containing the company name, product name, assembly version and trademark.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Unosquare.Swan.Runtime.GetAssemblies">
            <summary>
            Gets all the loaded assemblies in the current application domain.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Terminal">
            <summary>
            A console terminal helper to create nicer output and receive input from the user
            This class is thread-safe :)
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Terminal.OutputContext">
            <summary>
            Represents an asynchronous output context
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.OutputContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Terminal.OutputContext"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.#cctor">
            <summary>
            Initializes the <see cref="T:Unosquare.Swan.Terminal"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.EnqueueOutput(Unosquare.Swan.Terminal.OutputContext)">
            <summary>
            Enqueues the output to be written to the console
            This is the only method that should enqueue to the output
            Please note that if AvailableWriters is None, then no output will be enqueued
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.DequeueOutputAsync">
            <summary>
            Dequeues the output asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Flush(System.Nullable{System.TimeSpan})">
            <summary>
            Waits for all of the queued output messages to be written out to the console.
            Call this method if it is important to display console text before
            quitting the application such as showing usage or help.
            Set the timeout to null or TimeSpan.Zero to wait indefinitely.
            </summary>
            <param name="timeout">The timeout. Set the amount of time to black before this method exits.</param>
        </member>
        <member name="P:Unosquare.Swan.Terminal.IsConsolePresent">
            <summary>
            Gets a value indicating whether the Console is present
            </summary>
            <value>
            <c>true</c> if this instance is console present; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.IsDebuggerAttached">
            <summary>
            Gets a value indicating whether a debugger is attached.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Terminal.AvailableWriters">
            <summary>
            Gets the available output writers in a bitwise mask.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Terminal.OutputEncoding">
            <summary>
            Gets or sets the output encoding for the current console.
            </summary>
            <value>
            The output encoding.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.CursorLeft">
            <summary>
            Gets or sets the cursor left position.
            </summary>
            <value>
            The cursor left.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.CursorTop">
            <summary>
            Gets or sets the cursor top position.
            </summary>
            <value>
            The cursor top.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Terminal.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Sets the cursor position.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.BacklineCursor">
            <summary>
            Moves the output cursor one line up starting at left position 0
            Please note that backlining the cursor does not clear the contents of the 
            previous line so you might need to clear it by writing an empty string the 
            length of the console width
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Terminal.Table">
            <summary>
            Represents a Table to print in console
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Table.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>
            The color of the border.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadKey(System.Boolean,System.Boolean)">
            <summary>
            Reads a key from the Terminal. This is the closest equivalent to Console.ReadKey
            </summary>
            <param name="intercept">if set to <c>true</c> the pressed key will not be rendered to the output.</param>
            <param name="disableLocking">if set to <c>true</c> the output will continue to be shown. 
            This is useful for services and daemons that are running as console applications and wait for a key to exit the program.
            </param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadKey(System.String,System.Boolean)">
            <summary>
            Reads a key from the Terminal
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="preventEcho">if set to <c>true</c> [prevent echo].</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadKey(System.String)">
            <summary>
            Reads a key from the terminal preventing the key from being echoed.
            </summary>
            <param name="prompt">The prompt.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadLine">
            <summary>
            Reads a line of text from the console
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadNumber(System.String,System.Int32)">
            <summary>
            Reads a number from the input. If unable to parse, it returns the default number
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="defaultNumber">The default number.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadPrompt(System.String,System.Collections.Generic.Dictionary{System.ConsoleKey,System.String},System.String)">
            <summary>
            Creates a table prompt where the user can enter an option based on the options dictionary provided
            </summary>
            <param name="title">The title.</param>
            <param name="options">The options.</param>
            <param name="anyKeyOption">Any key option.</param>
            <returns></returns>
        </member>
        <member name="E:Unosquare.Swan.Terminal.OnLogMessageReceived">
            <summary>
            Occurs asynchronously, whenever a logging message is received by the terminal.
            Only called when Terminal writes data via Info, Error, Trace, Warn, Debug methods, regardless of whether or not
            the console is present. Subscribe to this event to pass data on to your own logger.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Terminal.OnLogMessageDisplaying">
            <summary>
            Occurs synchronously (so handle quickly), whenever a logging message is about to be enqueued to the
            console output. Setting the CancelOutput to true in the event arguments prevents the
            logging message to be written out to the console.
            Message filtering only works with logging methods such as Trace, Debug, Info, Warn, Error and Dump
            Standard Write methods do not get filtering capabilities.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.LogMessage(Unosquare.Swan.LogMessageType,System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a message
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The text.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="extendedData">The extended data. Could be an exception, or a dictionary of properties or anything the user specifies.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Debug(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a debug message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Debug(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a debug message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Debug(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a debug message to the console
            </summary>
            <param name="extendedData">The exception.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Trace(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message to the console
            </summary>
            <param name="message">The text.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Trace(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Trace(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message to the console
            </summary>
            <param name="extendedData">The extended data.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Warn(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a warning message to the console
            </summary>
            <param name="message">The text.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Warn(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a warning message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Warn(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a warning message to the console
            </summary>
            <param name="extendedData">The extended data.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Info(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs an info message to the console
            </summary>
            <param name="message">The text.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Info(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs an info message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Info(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an info message to the console
            </summary>
            <param name="extendedData">The extended data.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Error(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="message">The text.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Error(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Error(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="ex">The exception.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Log(System.String,System.String,Unosquare.Swan.LogMessageType,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="messageType">Type of the message.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Log(System.String,System.Type,Unosquare.Swan.LogMessageType,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="messageType">Type of the message.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Log(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="ex">The ex.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Log(System.Exception,System.Type,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="ex">The ex.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Dump(System.Object,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message showing all possible non-null properties of the given object
            This method is expensive as it uses Stringify internally
            </summary>
            <param name="obj">The object.</param>
            <param name="source">The source.</param>
            <param name="text">The title.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Dump(System.Object,System.Type,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message showing all possible non-null properties of the given object
            This method is expensive as it uses Stringify internally
            </summary>
            <param name="obj">The object.</param>
            <param name="source">The source.</param>
            <param name="text">The text.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.PrintCurrentCodePage">
            <summary>
            Prints all characters in the current code page.
            This is provided for debugging purposes only.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Write(System.Byte,System.Nullable{System.ConsoleColor},System.Int32,System.Boolean,Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes a character a number of times, optionally adding a new line at the end
            </summary>
            <param name="charCode">The character code.</param>
            <param name="color">The color.</param>
            <param name="count">The count.</param>
            <param name="newLine">if set to <c>true</c> [new line].</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Write(System.Char,System.Nullable{System.ConsoleColor},Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes the specified character in the default color.
            </summary>
            <param name="charCode">The character code.</param>
            <param name="color">The color.</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Write(System.String,System.Nullable{System.ConsoleColor},Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes the specified text in the given color
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.WriteLine(Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes a New Line Sequence to the standard output
            </summary>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.WriteLine(System.String,System.Nullable{System.ConsoleColor},Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes a line of text in the current console foreground color
            to the standard output
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.OverwriteLine(System.String,System.Nullable{System.ConsoleColor},Unosquare.Swan.TerminalWriters)">
            <summary>
            As opposed to WriteLine methods, it prepends a Carriage Return character to the text
            so that the console moves the cursor one position up after the text has been written out.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="T:Unosquare.Swan.Terminal.Settings">
            <summary>
            Terminal global settings
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.DefaultColor">
            <summary>
            Gets or sets the default output color.
            </summary>
            <value>
            The default color.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.InfoColor">
            <summary>
            Gets or sets the color of the information output logging.
            </summary>
            <value>
            The color of the information.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.DebugColor">
            <summary>
            Gets or sets the color of the debug output logging.
            </summary>
            <value>
            The color of the debug.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.TraceColor">
            <summary>
            Gets or sets the color of the trace output logging.
            </summary>
            <value>
            The color of the trace.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.WarnColor">
            <summary>
            Gets or sets the color of the warning logging.
            </summary>
            <value>
            The color of the warn.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.ErrorColor">
            <summary>
            Gets or sets the color of the error logging.
            </summary>
            <value>
            The color of the error.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.InfoPrefix">
            <summary>
            Gets or sets the information logging prefix.
            </summary>
            <value>
            The information prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.UserInputPrefix">
            <summary>
            Gets or sets the user input prefix.
            </summary>
            <value>
            The user input prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.UserOptionText">
            <summary>
            Gets or sets the user option text.
            </summary>
            <value>
            The user option text.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.DebugPrefix">
            <summary>
            Gets or sets the debug logging prefix.
            </summary>
            <value>
            The debug prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.TracePrefix">
            <summary>
            Gets or sets the trace logging prefix.
            </summary>
            <value>
            The trace prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.WarnPrefix">
            <summary>
            Gets or sets the warning logging prefix.
            </summary>
            <value>
            The warn prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.ErrorPrefix">
            <summary>
            Gets or sets the error logging prefix.
            </summary>
            <value>
            The error prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.LoggingTimeFormat">
            <summary>
            Gets or sets the logging time format.
            set to null or empty to prevent output
            </summary>
            <value>
            The logging time format.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.DisplayLoggingMessageType">
            <summary>
            Gets or sets the logging message types (in a bitwise mask)
            to display in the console.
            </summary>
            <value>
            The console options.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Abstractions.AppWorkerBase">
            <summary>
            A base implementation of an Application service containing a worker task that performs background processing.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Abstractions.AppWorkerBase.StateChanged">
            <summary>
            Occurs when [state changed].
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Abstractions.AppWorkerBase"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.CreateWorker">
            <summary>
            Creates the worker task.
            </summary>
            <exception cref="T:System.InvalidOperationException">Worker Thread seems to be still running.</exception>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.OnWorkerThreadLoopException(System.Exception)">
            <summary>
            Called when an unhandled exception is thrown.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.OnWorkerThreadExit">
            <summary>
            This method is called when the user loop has exited
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.WorkerThreadLoop">
            <summary>
            Implement this method as a loop that checks whether CancellationPending has been set to true
            If so, immediately exit the loop.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerBase.State">
            <summary>
            Gets the state of the application service.
            In other words, useful to know whether the service is running.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerBase.CancellationPending">
            <summary>
            Gets a value indicating whether the user loop is pending cancellation.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerBase.CancellationToken">
            <summary>
            Gets the cancellation token.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerBase.IsBusy">
            <summary>
            Gets a value indicating whether the thread is busy
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.Initialize">
            <summary>
            Performs internal service initialization tasks required before starting the service.
            </summary>
            <exception cref="T:System.InvalidOperationException">Service cannot be initialized because it seems to be currently running</exception>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.Start">
            <summary>
            Starts the application service. This call must not block the calling thread and must
            run on its own resources.
            </summary>
            <exception cref="T:System.InvalidOperationException">Service cannot be started because it seems to be currently running</exception>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.Stop">
            <summary>
            Stops and disposes service resources.
            </summary>
            <exception cref="T:System.InvalidOperationException">Service cannot be stopped because it is not running.</exception>
        </member>
        <member name="T:Unosquare.Swan.Abstractions.SettingsProvider`1">
            <summary>
            Represents a provider to save and load settings using a plain JSON file
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Unosquare.Swan.Abstractions.SettingsProvider`1.SyncRoot">
            <summary>
            A synchronization root that is commonly used for cross-thread operations.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.SettingsProvider`1.ConfigurationFilePath">
            <summary>
            Gets or sets the configuration file path. By default the entry assembly directory is used
            and the filename is appsettings.json.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.SettingsProvider`1.Global">
            <summary>
            Gets the global settings object
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.ReloadGlobalSettings">
            <summary>
            Reloads the global settings.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.GetJsonData">
            <summary>
            Gets the json data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.PersistGlobalSettings">
            <summary>
            Persists the global settings.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.RefreshFromList(System.Collections.Generic.List{Unosquare.Swan.Reflection.ExtendedPropertyInfo{`0}})">
            <summary>
            Updates settings from list.
            </summary>
            <param name="propertyList">The list.</param>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.GetList">
            <summary>
            Gets the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.ResetGlobalSettings">
            <summary>
            Resets the global settings.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Abstractions.SingletonBase`1">
            <summary>
            Represents a singleton pattern abstract class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Unosquare.Swan.Abstractions.SingletonBase`1.LazyInstance">
            <summary>
            The static, singleton instance reference.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SingletonBase`1.Dispose">
            <summary>
            Disposes the internal singleton instance.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SingletonBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            Call the GC.SuppressFinalize if you override this method and use
            a non-default class finalizer (destructor)
            </summary>
            <param name="disposeManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.SingletonBase`1.Instance">
            <summary>
            Gets the instance that this singleton represents.
            If the instance is null, it is constructed and assigned when this member is accessed.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.ArgumentParser">
            <summary>
            Provides methods to parse command line arguments.
            Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.)
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ArgumentParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.ArgumentParser"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ArgumentParser.#ctor(Unosquare.Swan.Components.ArgumentParserSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.ArgumentParser" /> class,
            configurable with <see cref="T:Unosquare.Swan.Components.ArgumentParserSettings" /> using a delegate.
            </summary>
            <param name="parseSettings">The parse settings.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParser.Settings">
            <summary>
            Gets the instance that implements <see cref="T:Unosquare.Swan.Components.ArgumentParserSettings"/> in use.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ArgumentParser.ParseArguments``1(System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Parses a string array of command line arguments constructing values in an instance of type <typeparamref name="T" />.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args">The arguments.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">args</exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ArgumentParser.SetPropertyValue``1(System.Reflection.PropertyInfo,System.String,``0)">
            <summary>
            Parse and assign the basic type value to the property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="targetProperty">The target property.</param>
            <param name="propertyValueString">The property value string.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ArgumentParser.WriteUsage(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Writes the application usage.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="T:Unosquare.Swan.Components.ArgumentParserSettings">
            <summary>
            Provides settings for <see cref="T:Unosquare.Swan.Components.ArgumentParser"/>.
            Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.)
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParserSettings.WriteBanner">
            <summary>
            Gets or sets a value indicating whether [write banner].
            </summary>
            <value>
              <c>true</c> if [write banner]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParserSettings.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether perform case sensitive comparisons.
            Note that case insensitivity only applies to <i>parameters</i>, not the values
            assigned to them (for example, enum parsing).
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParserSettings.CaseInsensitiveEnumValues">
            <summary>
            Gets or sets a value indicating whether perform case sensitive comparisons of <i>values</i>.
            Note that case insensitivity only applies to <i>values</i>, not the parameters.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParserSettings.IgnoreUnknownArguments">
            <summary>
            Gets or sets a value indicating whether the parser shall move on to the next argument and ignore the given argument if it
            encounter an unknown arguments
            </summary>
            <value>
            <c>true</c> to allow parsing the arguments with different class options that do not have all the arguments.
            </value>
            <remarks>
            This allows fragmented version class parsing, useful for project with add-on where add-ons also requires command line arguments but
            when these are unknown by the main program at build time.
            </remarks>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions">
            <summary>
            Defines Resolution actions
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions.AttemptResolve">
            <summary>
            Attempt to resolve type, even if the type isn't registered.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions.Fail">
            <summary>
            Fail resolution if type not explicitly registered
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions.GenericsOnly">
            <summary>
            Attempt to resolve unregistered type if requested type is generic
            and no registration exists for the specific generic parameters used.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerNamedResolutionFailureActions">
            <summary>
            Enumerates failure actions
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerNamedResolutionFailureActions.AttemptUnnamedResolution">
            <summary>
            The attempt unnamed resolution
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerNamedResolutionFailureActions.Fail">
            <summary>
            The fail
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions">
            <summary>
            Enumerates duplicate definition actions
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions.RegisterSingle">
            <summary>
            The register single
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions.RegisterMultiple">
            <summary>
            The register multiple
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions.Fail">
            <summary>
            The fail
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads">
            <summary>
            Define overload on named parameters
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads.FromIDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new instance from a Dictionary
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads.Default">
            <summary>
            Gets the default instance.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerResolveOptions">
            <summary>
            Resolution settings
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.UnregisteredResolutionAction">
            <summary>
            Gets or sets the unregistered resolution action.
            </summary>
            <value>
            The unregistered resolution action.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.NamedResolutionFailureAction">
            <summary>
            Gets or sets the named resolution failure action.
            </summary>
            <value>
            The named resolution failure action.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.Default">
            <summary>
            Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.FailNameNotFoundOnly">
            <summary>
            Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.FailUnregisteredAndNameNotFound">
            <summary>
            Preconfigured option for failing on resolving unregistered types and on named resolution if name not found
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.FailUnregisteredOnly">
            <summary>
            Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer">
            <summary>
            The concrete implementation of a simple IoC container
            based largely on TinyIoC
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.RegisterOptions">
            <summary>
            Registration options for "fluent" API
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.#ctor(Unosquare.Swan.Components.DependencyContainer,Unosquare.Swan.Components.DependencyContainer.TypeRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainer.RegisterOptions"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerRegistrationException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerRegistrationException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.WithWeakReference">
            <summary>
            Make registration hold a weak reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerRegistrationException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.WithStrongReference">
            <summary>
            Make registration hold a strong reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerRegistrationException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.UsingConstructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Sets the constructor to use
            </summary>
            <typeparam name="RegisterType">The type of the register type.</typeparam>
            <param name="constructor">The constructor.</param>
            <returns></returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerConstructorResolutionException">
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.ToCustomLifetimeManager(Unosquare.Swan.Components.DependencyContainer.RegisterOptions,Unosquare.Swan.Components.DependencyContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">RegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>RegisterOptions</returns>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions">
            <summary>
            Registration options for "fluent" API when registering multiple implementations
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.#ctor(System.Collections.Generic.IEnumerable{Unosquare.Swan.Components.DependencyContainer.RegisterOptions})">
            <summary>
            Initializes a new instance of the MultiRegisterOptions class.
            </summary>
            <param name="registerOptions">Registration options</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerRegistrationException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>MultiRegisterOptions</returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerRegistrationException"></exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.ToCustomLifetimeManager(Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions,Unosquare.Swan.Components.DependencyContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">MultiRegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>MultiRegisterOptions</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.GetChildContainer">
            <summary>
            Gets the child container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.AutoRegister(Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:Unosquare.Swan.DependencyContainerAutoRegistrationException"/>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:Unosquare.Swan.DependencyContainerAutoRegistrationException"/>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.Func{Unosquare.Swan.Components.DependencyContainer,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,System.Object},System.String)">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``1(System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``2(System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``1(``0,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``2(``1,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``1(System.Func{Unosquare.Swan.Components.DependencyContainer,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,``0},System.String)">
            <summary>
            Creates/replaces a named container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterMultiple``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <typeparam name="RegisterType">Type that each implementation implements</typeparam>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterMultiple(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <param name="registrationType">Type that each implementation implements</param>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Unregister``1(System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <typeparam name="RegisterType">Type to unregister</typeparam>
            <param name="name">Name of registration</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Unregister(System.Type,System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <param name="registerType">Type to unregister</param>
            <param name="name">Name of registration</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve(System.Type,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve(System.Type,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve(System.Type,System.String,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve``1(Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Unosquare.Swan.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve``1(System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve``1(Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve``1(System.String,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve(System.Type,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve(System.Type,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
            All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
            Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User supplied named parameter overloads</param>
            <param name="name">The name.</param>
            <param name="options">Resolution options</param>
            <returns>
            Bool indicating whether the type can be resolved
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve``1(Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve``1(System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve``1(Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve``1(System.String,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,Unosquare.Swan.Components.DependencyContainerResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the given options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.String,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and given name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the given options and name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and supplied constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.String,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the supplied options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.String,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(``0@)">
            <summary>
            Attempts to resolve a type using the default options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(Unosquare.Swan.Components.DependencyContainerResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the given options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.String,``0@)">
            <summary>
            Attempts to resolve a type using the default options and given name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the given options and name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,``0@)">
            <summary>
            Attempts to resolve a type using the default options and supplied constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.String,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,``0@)">
            <summary>
            Attempts to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the supplied options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.String,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ResolveAll(System.Type,System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <param name="resolveType">Type to resolveAll</param>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ResolveAll``1(System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.BuildUp(System.Object,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Attempts to resolve all public property dependencies on the given object using the given resolve options.
            </summary>
            <param name="input">Object to "build up"</param>
            <param name="resolveOptions">Resolve options to use</param>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.ITinyIoCObjectLifetimeProvider">
            <summary>
            Provides custom lifetime management for ASP.Net per-request lifetimes etc.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ITinyIoCObjectLifetimeProvider.GetObject">
            <summary>
            Gets the stored object if it exists, or null if not
            </summary>
            <returns>Object instance or null</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ITinyIoCObjectLifetimeProvider.SetObject(System.Object)">
            <summary>
            Store the object
            </summary>
            <param name="value">Object to store</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ITinyIoCObjectLifetimeProvider.ReleaseObject">
            <summary>
            Release the object
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.ObjectFactoryBase.AssumeConstruction">
            <summary>
            Whether to assume this factory successfully constructs its objects
            
            Generally set to true for delegate style factories as CanResolve cannot delve
            into the delegates they contain.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.ObjectFactoryBase.CreatesType">
            <summary>
            The type the factory instantiates
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.ObjectFactoryBase.Constructor">
            <summary>
            Constructor to use, if specified
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ObjectFactoryBase.GetObject(System.Type,Unosquare.Swan.Components.DependencyContainer,Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Create the type
            </summary>
            <param name="requestedType">Type user requested to be resolved</param>
            <param name="container">Container that requested the creation</param>
            <param name="parameters">Any user parameters passed</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.MultiInstanceFactory">
            <summary>
            IObjectFactory that creates new instances of types for each resolution
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.DelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.WeakDelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            Holds the delegate using a weak reference
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.InstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.WeakInstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            
            Stores the instance with a weak reference
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.SingletonFactory">
            <summary>
            A factory that lazy instantiates a type and always returns the same instance
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.CustomObjectLifetimeFactory">
            <summary>
            A factory that offloads lifetime to an external lifetime provider
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.Current">
            <summary>
            Lazy created Singleton instance of the container for simple scenarios
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.TypeRegistration">
            <summary>
            Represents a Type Registration within the IoC Container
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainer.TypeRegistration"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainer"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.IMessageHubMessage">
            <summary>
            A TinyMessage to be published/delivered by TinyMessenger
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IMessageHubMessage.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubMessageBase">
            <summary>
            Base class for messages that provides weak reference storage of the sender
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.MessageHubMessageBase._sender">
            <summary>
            Store a WeakReference to the sender just in case anyone is daft enough to
            keep the message around and prevent the sender from being collected.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.MessageHubMessageBase.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubMessageBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubGenericMessage`1">
            <summary>
            Generic message with user specified content
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="P:Unosquare.Swan.Components.MessageHubGenericMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubGenericMessage`1.#ctor(System.Object,`0)">
            <summary>
            Create a new instance of the GenericTinyMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <param name="content">Contents of the message</param>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubCancellableGenericMessage`1">
            <summary>
            Basic "cancellable" generic message
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="P:Unosquare.Swan.Components.MessageHubCancellableGenericMessage`1.Cancel">
            <summary>
            Cancel action
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.MessageHubCancellableGenericMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubCancellableGenericMessage`1.#ctor(System.Object,`0,System.Action)">
            <summary>
            Create a new instance of the CancellableGenericTinyMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <param name="content">Contents of the message</param>
            <param name="cancelAction">Action to call for cancellation</param>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubSubscriptionToken">
            <summary>
            Represents an active subscription to a message
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubSubscriptionToken.#ctor(Unosquare.Swan.Components.IMessageHub,System.Type)">
            <summary>
            Initializes a new instance of the TinyMessageSubscriptionToken class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubSubscriptionToken.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.IMessageHubSubscription">
            <summary>
            Represents a message subscription
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IMessageHubSubscription.SubscriptionToken">
            <summary>
            Token returned to the subscribed to reference this subscription
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHubSubscription.ShouldAttemptDelivery(Unosquare.Swan.Components.IMessageHubMessage)">
            <summary>
            Whether delivery should be attempted.
            </summary>
            <param name="message">Message that may potentially be delivered.</param>
            <returns>True - ok to send, False - should not attempt to send</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHubSubscription.Deliver(Unosquare.Swan.Components.IMessageHubMessage)">
            <summary>
            Deliver the message
            </summary>
            <param name="message">Message to deliver</param>
        </member>
        <member name="T:Unosquare.Swan.Components.IMessageHubProxy">
            <summary>
            Message proxy definition.
            
            A message proxy can be used to intercept/alter messages and/or
            marshal delivery actions onto a particular thread.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHubProxy.Deliver(Unosquare.Swan.Components.IMessageHubMessage,Unosquare.Swan.Components.IMessageHubSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubDefaultProxy">
            <summary>
            Default "pass through" proxy.
            
            Does nothing other than deliver the message.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubDefaultProxy.#cctor">
            <summary>
            Initializes the <see cref="T:Unosquare.Swan.Components.MessageHubDefaultProxy"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.MessageHubDefaultProxy.Instance">
            <summary>
            Singleton instance of the proxy.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubDefaultProxy.Deliver(Unosquare.Swan.Components.IMessageHubMessage,Unosquare.Swan.Components.IMessageHubSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="T:Unosquare.Swan.Components.IMessageHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            All references are held with WeakReferences
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},System.Boolean,Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <returns>
            TinyMessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>
            TinyMessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <returns>
            TinyMessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>
            TinyMessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Unsubscribe``1(Unosquare.Swan.Components.MessageHubSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.WeakTinyMessageSubscription`1.#ctor(Unosquare.Swan.Components.MessageHubSubscriptionToken,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the WeakTinyMessageSubscription class.
            </summary>
            <param name="subscriptionToken">The subscription token.</param>
            <param name="deliveryAction">Delivery action</param>
            <param name="messageFilter">Filter function</param>
            <exception cref="T:System.ArgumentNullException">
            subscriptionToken
            or
            deliveryAction
            or
            messageFilter
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.StrongTinyMessageSubscription`1.#ctor(Unosquare.Swan.Components.MessageHubSubscriptionToken,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the TinyMessageSubscription class.
            </summary>
            <param name="subscriptionToken">The subscription token.</param>
            <param name="deliveryAction">Delivery action</param>
            <param name="messageFilter">Filter function</param>
            <exception cref="T:System.ArgumentNullException">
            subscriptionToken
            or
            deliveryAction
            or
            messageFilter
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            All references are held with strong references
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with strong references
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},System.Boolean,Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter"></param>
            <returns>
            TinyMessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter"></param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>
            TinyMessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter"></param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <returns>
            TinyMessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter"></param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>
            TinyMessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Unsubscribe``1(Unosquare.Swan.Components.MessageHubSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="T:Unosquare.Swan.Components.IObjectMap">
            <summary>
            Interface object map
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IObjectMap.Map">
            <summary>
            Gets or sets the map.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IObjectMap.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IObjectMap.DestinationType">
            <summary>
            Gets or sets the type of the destination.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.ObjectMap`2">
            <summary>
            Represents an object map
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMap`2.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.ObjectMap`2" /> class.
            </summary>
            <param name="intersect">The intersect.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.ObjectMap`2.Map">
            <summary>
            Gets or sets the map.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.ObjectMap`2.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.ObjectMap`2.DestinationType">
            <summary>
            Gets or sets the type of the destination.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMap`2.MapProperty``2(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            Maps the property.
            </summary>
            <typeparam name="TDestinationProperty">The type of the destination property.</typeparam>
            <typeparam name="TSourceProperty">The type of the source property.</typeparam>
            <param name="destinationProperty">The destination property.</param>
            <param name="sourceProperty">The source property.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMap`2.RemoveMap``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Removes the map.
            </summary>
            <typeparam name="TDestinationProperty">The type of the destination property.</typeparam>
            <param name="destinationProperty">The destination property.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Invalid destination expression</exception>
        </member>
        <member name="T:Unosquare.Swan.Components.ObjectMapper">
            <summary>
            Represents an AutoMapper-like object to map from one object type
            to another
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMapper.CreateMap``2">
            <summary>
            Creates the map.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            You can't create an existing map
            or
            Types doesn't match
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMapper.Map``1(System.Object,System.Boolean)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="autoResolve">if set to <c>true</c> [automatic resolve].</param>
            <returns>A new instance of the map</returns>
        </member>
        <member name="T:Unosquare.Swan.Components.ProcessResult">
            <summary>
            Represents the text of the standard output and standard error
            of a process, including its exit code.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessResult.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.ProcessResult" /> class.
            </summary>
            <param name="exitCode">The exit code.</param>
            <param name="standardOutput">The standard output.</param>
            <param name="standardError">The standard error.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.ProcessResult.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.ProcessResult.StandardOutput">
            <summary>
            Gets the text of the standard output.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.ProcessResult.StandardError">
            <summary>
            Gets the text of the standard error.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.ProcessRunner">
            <summary>
            Provides methods to help create external processes, and efficiently capture the
            standard error and standard output streams.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback">
            <summary>
            Defines a delegate to handle binary data reception from the standard 
            output or standard error streams from a process
            </summary>
            <param name="processData">The process data.</param>
            <param name="process">The process.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessRunner.CopyStreamAsync(System.Diagnostics.Process,System.IO.Stream,Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Copies the stream asynchronously.
            </summary>
            <param name="process">The process.</param>
            <param name="baseStream">The source stream.</param>
            <param name="onDataCallback">The on data callback.</param>
            <param name="syncEvents">if set to <c>true</c> [synchronize events].</param>
            <param name="ct">The ct.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessRunner.GetProcessOutputAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Runs the process asynchronously and if the exit code is 0,
            returns all of the standard output text. If the exit code is something other than 0
            it returns the contents of standard error.
            This method is meant to be used for programs that output a relatively small amount of text.
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessRunner.GetProcessResultAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a process asynchronously and returns the text of the standard output and standard error streams
            along with the exit code. This method is meant to be used for programs that output a relatively small
            amount of text.
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="ct">The ct.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessRunner.RunProcessAsync(System.String,System.String,Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback,Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Runs an external process asynchronously, providing callbacks to
            capture binary data from the standard error and standard output streams.
            The callbacks contain a reference to the process so you can respond to output or
            error streams by writing to the process' input stream.
            The exit code (return value) will be -1 for forceful termination of the process
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="onOutputData">The on output data.</param>
            <param name="onErrorData">The on error data.</param>
            <param name="syncEvents">if set to <c>true</c> the next data callback will wait until the current one completes.</param>
            <param name="ct">The ct.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Formatters.CsvReader">
            <summary>
            Represents a reader designed for CSV text.
            It is capable of deserializing objects from individual lines of CSV text,
            transforming CSV lines of text into objects,
            or simply reading the lines of CSV as an array of strings
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Unosquare.Swan.Formatters.CsvReader.ReadState">
            <summary>
            Defines the 3 different read states
            for the parsing state machine
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader" /> class.
            </summary>
            <param name="inputStream">The stream.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the input stream open</param>
            <param name="textEncoding">The text encoding.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader"/> class.
            It will automatically close the stream upon disposing
            </summary>
            <param name="stream">The stream.</param>
            <param name="textEncoding">The text encoding.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader"/> class.
            It automatically closes the stream when disposing this reader
            and uses the Windows 1253 encoding
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader"/> class.
            It uses the Windows 1252 Encoding by default and it automatically closes the file
            when this reader is disposed of.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader"/> class.
            It automatically closes the file when disposing this reader
            </summary>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvReader.Count">
            <summary>
            Gets number of lines that have been read, including the headings
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvReader.EscapeCharacter">
            <summary>
            Gets or sets the escape character.
            By default it is the double quote '"'
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvReader.SeparatorCharacter">
            <summary>
            Gets or sets the separator character.
            By default it is the comma character ','
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvReader.EndOfStream">
            <summary>
            Gets a value indicating whether the stream reader is at the end of the stream
            In other words, if no more data can be read, this will be set to true.
            </summary>
            <value>
              <c>true</c> if [end of stream]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadLine">
            <summary>
            Reads a line of CSV text into an array of strings
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.SkipRecord">
            <summary>
            Skips a line of CSV text.
            This operation does not increment the Count property and it is useful when you need to read the headings
            skipping over a few lines as Reading headings is only supported as the first read operation (i.e. while count is still 0)
            </summary>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadHeadings">
            <summary>
            Reads a line of CSV text and stores the values read as a representation of the column names
            to be used for parsing objects. You have to call this method before calling ReadObject methods.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            Reading headings is only supported as the first read operation.
            or
            ReadHeadings
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads a line of CSV text, converting it into a dynamic object in which properties correspond to the names of the headings
            </summary>
            <param name="map">The mappings between CSV headings (keys) and object properties (values)</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">ReadHeadings</exception>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
            <exception cref="T:System.ArgumentNullException">map</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject">
            <summary>
            Reads a line of CSV text, converting it into a dynamic object
            The property names correspond to the names of the CSV headings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject``1(System.Collections.Generic.IDictionary{System.String,System.String},``0@)">
            <summary>
            Reads a line of CSV text converting it into an object of the given type, using a map (or Dictionary)
            where the keys are the names of the headings and the values are the names of the instance properties
            in the given Type. The result object must be already instantiated.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map">The map.</param>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException">map
            or
            result</exception>
            <exception cref="T:System.InvalidOperationException">ReadHeadings</exception>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject``1(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads a line of CSV text converting it into an object of the given type, using a map (or Dictionary)
            where the keys are the names of the headings and the values are the names of the instance properties
            in the given Type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map">The map of CSV headings (keys) and Type property names (values).</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">map</exception>
            <exception cref="T:System.InvalidOperationException">ReadHeadings</exception>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject``1">
            <summary>
            Reads a line of CSV text converting it into an object of the given type, and assuming
            the property names of the target type match the heading names of the file.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ParseRecord(System.IO.StreamReader,System.Char,System.Char)">
            <summary>
            Parses a line of standard CSV text into an array of strings.
            Note that quoted values might have new line sequences in them. Field values will contain such sequences
            </summary>
            <param name="reader">The reader.</param>
            <param name="escapeCharacter">The escape character.</param>
            <param name="separatorCharacter">The separator character.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.LoadRecords``1(System.String)">
            <summary>
            Loads the records from the give file path.
            This method uses Windows 1252 encoding
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Formatters.CsvWriter">
            <summary>
            A CSV writer useful for exporting a set of objects
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter" /> class.
            </summary>
            <param name="outputStream">The output stream.</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter"/> class.
            It automatically closes the stream when disposing this writer
            </summary>
            <param name="outputStream">The output stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter"/> class.
            It uses the Windows 1252 encoding and automatically closes
            the stream upon disposing this writer
            </summary>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter"/> class.
            It opens the file given file, automatically closes the stream upon 
            disposing of this writer, and uses the Windows 1252 encoding
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter"/> class.
            It opens the file given file, automatically closes the stream upon 
            disposing of this writer, and uses the given text encoding for output
            </summary>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.SeparatorCharacter">
            <summary>
            Gets or sets the field separator character.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.EscapeCharacter">
            <summary>
            Gets or sets the escape character to use to escape field values
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.NewLineSequence">
            <summary>
            Gets or sets the new line character sequence to use when writing a line.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.IgnorePropertyNames">
            <summary>
            Defines a list of properties to ignore when outputting CSV lines
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.Count">
            <summary>
            Gets number of lines that have been written, including the headings line
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteLine(System.Object[])">
            <summary>
            Writes a line of CSV text. Items are converted to strings.
            If items are found to be null, empty strings are written out.
            If items are not string, the ToStringInvariant() method is called on them
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteObject(System.Object)">
            <summary>
            Writes a row of CSV text. It handles the special cases where the object is
            a dynamic object or and array. It also handles non-collection objects fine.
            If you do not like the way the output is handled, you can simply write an extension
            method of this class and use the WriteLine method instead.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteObject``1(``0)">
            <summary>
            Writes a row of CSV text. It handles the special cases where the object is
            a dynamic object or and array. It also handles non-collection objects fine.
            If you do not like the way the output is handled, you can simply write an extension
            method of this class and use the WriteLine method instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes a set of items, one per line and atomically by repeatedly calling the
            WriteObject method. For more info check out the description of the WriteObject
            method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteObjectValues(System.Object)">
            <summary>
            Writes the object values.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteCollectionValues(System.Collections.ICollection)">
            <summary>
            Writes the collection values.
            </summary>
            <param name="typedItem">The typed item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteDictionaryValues(System.Collections.IDictionary)">
            <summary>
            Writes the dictionary values.
            </summary>
            <param name="typedItem">The typed item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteDynamicObjectValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Writes the dynamic object values.
            </summary>
            <param name="typedItem">The typed item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteHeadings(System.Type)">
            <summary>
            Writes the headings.
            </summary>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteHeadings``1">
            <summary>
            Writes the headings.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteHeadings(System.Collections.IDictionary)">
            <summary>
            Writes the headings.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteHeadings(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Writes the headings.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.GetFilteredDictionaryKeys(System.Collections.IDictionary)">
            <summary>
            Gets the filtered dictionary keys using the IgnoreProperties list.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.GetFilteredDictionaryKeys(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the filtered dictionary keys using the IgnoreProperties list.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.GetFilteredDictionaryValues(System.Collections.IDictionary)">
            <summary>
            Gets the filtered dictionary values using the IgnoreProperties list.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.GetFilteredDictionaryValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the filtered dictionary values using the IgnoreProperties list.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.GetFilteredTypeProperties(System.Type)">
            <summary>
            Gets the filtered type properties using the IgnoreProperties list.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.SaveRecords``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Saves the items to a CSV file.
            If the file exits, it overwrites it. If it does not, it creates it.
            It uses the Windows 1252 text encoding for output
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeAlsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Formatters.Json">
            <summary>
            A very simple, light-weight JSON library written by Mario
            to teach Geo how things are done
            
            This is an useful helper for small tasks but it doesn't represent a full-featured
            serializer such as the beloved Json.NET
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.RetrieveProperties(System.Type)">
            <summary>
            Retrieves PropertyInfo[] (both public and non-public). for the given type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.ConvertFromJsonResult(System.Object,System.Type,System.Object@,System.Boolean)">
            <summary>
            Converts a json deserialized object (simple type, dictionary or list) to a new instance of the sepcified target type.
            </summary>
            <param name="source">The source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetInstance">An optional target instance. If null, we will attempt creation.</param>
            <param name="includeNonPublic">if set to <c>true</c> [include private].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serialize(System.Object,System.Boolean,System.String,System.Boolean,System.String[],System.String[])">
            <summary>
            Serializes the specified object into a JSON string.
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> it formats and indents the output.</param>
            <param name="typeSpecifier">The type specifier. Leave null or empty to avoid setting.</param>
            <param name="includeNonPublic">if set to <c>true</c> non-public getters will be also read.</param>
            <param name="includedNames">The included property names.</param>
            <param name="excludedNames">The excluded property names.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.SerializeOnly(System.Object,System.Boolean,System.String[])">
            <summary>
            Serializes the specified object only including the specified property names.
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> it formats and indents the output.</param>
            <param name="includeNames">The include names.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.SerializeExcluding(System.Object,System.Boolean,System.String[])">
            <summary>
            Serializes the specified object excluding the specified property names.
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> it formats and indents the output.</param>
            <param name="excludeNames">The exclude names.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserialize(System.String)">
            <summary>
            Deserializes the specified json string as either a Dictionary[string, object] or as a List[object]
            depending on the syntax of the JSON string
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified json string and converts it to the specified object type.
            Non-public constructors and property setters are ignored.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserialize``1(System.String,System.Boolean)">
            <summary>
            Deserializes the specified json string and converts it to the specified object type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The json.</param>
            <param name="includeNonPublic">if set to true, it also uses the non-public constructors and property setters.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserialize(System.String,System.Type,System.Boolean)">
            <summary>
            Deserializes the specified json string and converts it to the specified object type.
            </summary>
            <param name="json">The json.</param>
            <param name="resultType">Type of the result.</param>
            <param name="includeNonPublic">if set to true, it also uses the non-public constructors and property setters.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Formatters.Json.Deserializer">
            <summary>
            A simple JSON Deserializer
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Formatters.Json.Deserializer.ReadState">
            <summary>
            Defines the different JSOn read states
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserializer.DeserializeInternal(System.String)">
            <summary>
            Deserializes specified JSON string
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Formatters.Json.Serializer">
            <summary>
            A simple JSON serializer
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.#ctor(System.Object,System.Int32,System.Boolean,System.String,System.String[],System.String[],System.Boolean,System.Collections.Generic.List{System.WeakReference})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.Json.Serializer" /> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="depth">The depth.</param>
            <param name="format">if set to <c>true</c> [format].</param>
            <param name="typeSpecifier">The type specifier. Leave null or empty to skip.</param>
            <param name="includeProperties">The include properties.</param>
            <param name="excludeProperties">The exclude properties.</param>
            <param name="includeNonPublic">if set to <c>true</c> [include non public].</param>
            <param name="parentReferences">The parent references.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.Serialize(System.Object,System.Int32,System.Boolean,System.String,System.String[],System.String[],System.Boolean,System.Collections.Generic.List{System.WeakReference})">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="depth">The depth.</param>
            <param name="format">if set to <c>true</c> [format].</param>
            <param name="typeSepcifier">The type sepcifier. Leave empty to avoid setting.</param>
            <param name="includeProperties">The include properties.</param>
            <param name="excludeProperties">The exclude properties.</param>
            <param name="includeNonPublic">if set to true, then non public properties are also retrieved</param>
            <param name="parentReferences">The parent references.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.GetIndentString(System.Int32)">
            <summary>
            Gets the indent string given the depth.
            </summary>
            <param name="depth">The depth.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.IsNonEmptyJsonArrayOrObject(System.String)">
            <summary>
            Determines whether the specified serialized JSON is a non-empty an array or an object
            </summary>
            <param name="serialized">The serialized.</param>
            <returns>
              <c>true</c> if [is set opening] [the specified serialized]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.RemoveLastComma">
            <summary>
            Removes the last comma in the current string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.Append(System.String,System.Int32)">
            <summary>
            Appends the specified text to the output StringBuilder.
            </summary>
            <param name="text">The text.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.Append(System.Char,System.Int32)">
            <summary>
            Appends the specified text to the output StringBuilder.
            </summary>
            <param name="text">The text.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.AppendLine">
            <summary>
            Appends a line to the output stringbuilder.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.Escape(System.String)">
            <summary>
            Escapes the specified string as a JSON string.
            </summary>
            <param name="str">The string to escape.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Connection">
            <summary>
            Represents a network connection either on the server or on the client. It wraps a TcpClient
            and its corresponding network streams. It is capable of working in 2 modes. Typically on the server side
            you will need to enable continuous reading and events. On the client side you may want to disable continuous reading
            and use the Read methods available. In continuous reading mode Read methods are not available and will throw
            an invalid operation exceptions if they are used.
            Continuous Reading Mode: Subscribe to data reception events, it runs a background thread, don't use Read methods
            Manual Reading Mode: Data reception events are NEVER fired. No background threads are used. Use Read methods to receive data
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="E:Unosquare.Swan.Networking.Connection.DataReceived">
            <summary>
            Occurs when the receive buffer has encounters a new line sequence, the buffer is flushed or the buffer is full.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.Connection.ConnectionFailure">
            <summary>
            Occurs when an error occurs while upgrading, sending, or receiving data in this client
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.Connection.ClientDisconnected">
            <summary>
            Occurs when a client is disconnected
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.Id">
            <summary>
            Gets the unique identifier of this connection.
            This field is filled out upon instantiation of this class
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.NetworkStream">
            <summary>
            Gets or sets the network stream.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.SecureStream">
            <summary>
            Gets or sets the SSL stream.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ActiveStream">
            <summary>
            Gets the active stream. Returns an SSL stream if the connection is secure, otherwise returns 
            the underlying NetworkStream
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.IsActiveStreamSecure">
            <summary>
            Gets a value indicating whether the current connection stream is an SSL stream.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.TextEncoding">
            <summary>
            Gets the text encoding for send and receive operations.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.RemoteEndPoint">
            <summary>
            Gets the remote end point of this TCP connection.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.LocalEndPoint">
            <summary>
            Gets the local end point of this TCP connection.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.RemoteClient">
            <summary>
            Gets the remote client of this TCP connection.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ProtocolBlockSize">
            <summary>
            When in continuous reading mode, and if set to greater than 0,
            a Data reception event will be fired whenever the amount of bytes
            determined by this property has been received. Useful for fixed-length message protocols.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.IsContinuousReadingEnabled">
            <summary>
            Gets a value indicating whether this connection is in continuous reading mode.
            Remark: Whenever a disconnect event occurs, the background thread is terminated
            and this property will return false whenever the reading thread is not active.
            Therefore, even if continuous reading was not disabled in the constructor, this property
            might return false.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ConnectionStartTimeUtc">
            <summary>
            Gets the start time at which the connection was started in UTC.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ConnectionStartTime">
            <summary>
            Gets the start time at which the connection was started in local time.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ConnectionDuration">
            <summary>
            Gets the duration of the connection.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.DataReceivedLastTimeUtc">
            <summary>
            Gets the last time data was received at in UTC.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.DataReceivedIdleDuration">
            <summary>
            Gets how long has elapsed since data was last received.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.DataSentLastTimeUtc">
            <summary>
            Gets the last time at which data was sent in UTC.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.DataSentIdleDuration">
            <summary>
            Gets how long has elapsed since data was last sent
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.IsConnected">
            <summary>
            Gets a value indicating whether this connection is connected.
            Remarks: This property polls the socket internally and checks if it is available to read data from it.
            If disconnect has been called, then this property will return false.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.#ctor(System.Net.Sockets.TcpClient,System.Text.Encoding,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Connection"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="textEncoding">The text encoding.</param>
            <param name="newLineSequence">The new line sequence used for read and write operations.</param>
            <param name="disableContinuousReading">if set to <c>true</c> [disable continuous reading].</param>
            <param name="blockSize">Size of the block. -- set to 0 or less to disable</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Connection"/> class in continuous reading mode.
            It uses UTF8 encoding, CRLF as a new line sequence and disables a protocol block size
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.#ctor(System.Net.Sockets.TcpClient,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Connection"/> class in continuous reading mode.
            It uses UTF8 encoding, disables line sequences, and uses a protocol block size instead
            </summary>
            <param name="client">The client.</param>
            <param name="blockSize">Size of the block.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.RaiseReceiveBufferEvents(System.Byte[])">
            <summary>
            Raises the receive buffer events.
            </summary>
            <param name="receivedData">The received data.</param>
            <exception cref="T:System.Exception">Split function failed! This is terribly wrong!</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.PerformContinuousReading(System.Object)">
            <summary>
            This is the body of the thread when performing continuous reading
            </summary>
            <param name="threadContext">The thread context.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadDataAsync(System.TimeSpan)">
            <summary>
            Reads data from the remote client asynchronously and with the given timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Read methods have been disabled because continuous reading is enabled.</exception>
            <exception cref="T:System.TimeoutException">Reading data from {ActiveStream} timed out in {timeout.TotalMilliseconds} m</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadDataAsync">
            <summary>
            Reads data asynchronously from the remote stream with a 5000 millisecond timeout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadTextAsync(System.TimeSpan)">
            <summary>
            Asynchronously reads data as text with the given timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadTextAsync">
            <summary>
            Asynchronously reads data as text with a 5000 millisecond timeout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadLineAsync">
            <summary>
            Performs the same task as this method's overload but it defaults to a read timeout of 30 seconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadLineAsync(System.TimeSpan)">
            <summary>
            Reads the next available line of text in queue. Return null when no text is read.
            This method differs from the rest of the read methods because it keeps an internal
            queue of lines that are read from the stream and only returns the one line next in the queue.
            It is only recommended to use this method when you are working with text-based protocols
            and the rest of the read methods are not called.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Read methods have been disabled because continuous reading is enabled.</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteDataAsync(System.Byte[],System.Boolean)">
            <summary>
            Writes data asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="forceFlush">if set to <c>true</c> [force flush].</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteTextAsync(System.String)">
            <summary>
            Writes text asynchronously.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteTextAsync(System.String,System.Text.Encoding)">
            <summary>
            Writes text asynchronously.
            </summary>
            <param name="text">The text.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteLineAsync(System.String,System.Text.Encoding)">
            <summary>
            Writes a line of text asynchronously. 
            The new line sequence is added automatically at the end of the line.
            </summary>
            <param name="line">The line.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteLineAsync(System.String)">
            <summary>
            Writes a line of text asynchronously. 
            The new line sequence is added automatically at the end of the line.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.UpgradeToSecureAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Upgrades the active stream to an SSL stream if this connection object is hosted in the server.
            </summary>
            <param name="serverCertificate">The server certificate.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.UpgradeToSecureAsClientAsync(System.String,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Upgrades the active stream to an SSL stream if this connection object is hosted in the client.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.UpgradeToSecureAsClientAsync">
            <summary>
            Upgrades the active stream to an SSL stream if this connection object is hosted in the client.
            Remarks: DO NOT use this method in production. It accepts ALL server certificates without even checking them!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.Disconnect">
            <summary>
            Disconnects this connection.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.ConnectionListener">
            <summary>
            TCP Listener manager with built-in events and asynchronous functionality.
            This networking component is typically used when writing server software
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="E:Unosquare.Swan.Networking.ConnectionListener.OnConnectionAccepting">
            <summary>
            Occurs when a new connection requests a socket from the listener.
            Set Cancel = true to prevent the TCP client from being accepted.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.ConnectionListener.OnConnectionAccepted">
            <summary>
            Occurs when a new connection is accepted.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.ConnectionListener.OnConnectionFailure">
            <summary>
            Occurs when a connection fails to get accepted
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.ConnectionListener.OnListenerStopped">
            <summary>
            Occurs when the listener stops.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.ConnectionListener.LocalEndPoint">
            <summary>
            Gets the local end point on which we are listening.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.ConnectionListener.IsListening">
            <summary>
            Gets a value indicating whether this listener is active
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.ConnectionListener.Id">
            <summary>
            Gets a unique identifier that gets automatically assigned upon instantiation of this class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.ConnectionListener"/> class.
            </summary>
            <param name="listenEndPoint">The listen end point.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.ConnectionListener"/> class.
            It uses the loopback address for listening
            </summary>
            <param name="listenPort">The listen port.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.ConnectionListener"/> class.
            </summary>
            <param name="listenAddress">The listen address.</param>
            <param name="listenPort">The listen port.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Start">
            <summary>
            Starts the listener in an asynchronous, non-blocking fashion.
            Subscribe to the events of this class to gain access to connected client sockets.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cancellation has already been requested. This listener is not reusable.</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.DoWorkAsync">
            <summary>
            Continuously checks for client connections until the Close method has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Stop">
            <summary>
            Stops the listener from receiving new connections.
            This does not prevent the listener from 
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.Swan.Networking.ConnectionListener"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.DnsClient.DnsClientRequest.Resolve">
            <summary>
            Resolves this request into a response using the provided DNS information. The given
            request strategy is used to retrieve the response.
            </summary>
            <exception cref="T:Unosquare.Swan.DnsQueryException">Throw if a malformed response is received from the server</exception>
            <exception cref="T:System.IO.IOException">Thrown if a IO error occurs</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown if a the reading or writing to the socket fails</exception>
            <returns>The response received from server</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsQueryResult">
            <summary>
            Represents a response from a DNS server
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.DnsQueryResult.#ctor(Unosquare.Swan.Networking.DnsClient.DnsClientResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.DnsQueryResult"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.IsAuthoritativeServer">
            <summary>
            Gets a value indicating whether this instance is authoritative server.
            </summary>
            <value>
            <c>true</c> if this instance is authoritative server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.IsTruncated">
            <summary>
            Gets a value indicating whether this instance is truncated.
            </summary>
            <value>
            <c>true</c> if this instance is truncated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.IsRecursionAvailable">
            <summary>
            Gets a value indicating whether this instance is recursion available.
            </summary>
            <value>
            <c>true</c> if this instance is recursion available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.OperationCode">
            <summary>
            Gets the operation code.
            </summary>
            <value>
            The operation code.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.ResponseCode">
            <summary>
            Gets the response code.
            </summary>
            <value>
            The response code.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.AnswerRecords">
            <summary>
            Gets the answer records.
            </summary>
            <value>
            The answer records.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.AdditionalRecords">
            <summary>
            Gets the additional records.
            </summary>
            <value>
            The additional records.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.AuthorityRecords">
            <summary>
            Gets the authority records.
            </summary>
            <value>
            The authority records.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsRecord">
            <summary>
            Represents a DNS record entry
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.DnsRecord.#ctor(Unosquare.Swan.Networking.DnsClient.IDnsResourceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.DnsRecord"/> class.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.Class">
            <summary>
            Gets the class.
            </summary>
            <value>
            The class.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.TimeToLive">
            <summary>
            Gets the time to live.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.Data">
            <summary>
            Gets the raw data of the record.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.DataText">
            <summary>
            Gets the data text bytes in ASCII encoding.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.PointerDomainName">
            <summary>
            Gets the name of the pointer domain.
            </summary>
            <value>
            The name of the pointer domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.IPAddress">
            <summary>
            Gets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.NameServerDomainName">
            <summary>
            Gets the name of the name server domain.
            </summary>
            <value>
            The name of the name server domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.CanonicalDomainName">
            <summary>
            Gets the name of the canonical domain.
            </summary>
            <value>
            The name of the canonical domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.MailExchangerPreference">
            <summary>
            Gets the mail exchanger preference.
            </summary>
            <value>
            The mail exchanger preference.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.MailExchangerDomainName">
            <summary>
            Gets the name of the mail exchanger domain.
            </summary>
            <value>
            The name of the mail exchanger domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaMasterDomainName">
            <summary>
            Gets the name of the soa master domain.
            </summary>
            <value>
            The name of the soa master domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaResponsibleDomainName">
            <summary>
            Gets the name of the soa responsible domain.
            </summary>
            <value>
            The name of the soa responsible domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaSerialNumber">
            <summary>
            Gets the soa serial number.
            </summary>
            <value>
            The soa serial number.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaRefreshInterval">
            <summary>
            Gets the soa refresh interval.
            </summary>
            <value>
            The soa refresh interval.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaRetryInterval">
            <summary>
            Gets the soa retry interval.
            </summary>
            <value>
            The soa retry interval.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaExpireInterval">
            <summary>
            Gets the soa expire interval.
            </summary>
            <value>
            The soa expire interval.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaMinimumTimeToLive">
            <summary>
            Gets the soa minimum time to live.
            </summary>
            <value>
            The soa minimum time to live.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Networking.JsonClient">
            <summary>
            Represents a HttpClient with extended methods to use with JSON payloads 
            and bearer tokens authentication
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Post``1(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Post a object as JSON with optional authorization token.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Post(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Posts the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.PostString(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Posts the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Put``1(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Puts the specified URL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Put(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Puts the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.PutString(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Puts as string.
            </summary>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.GetString(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets as string.
            </summary>
            <param name="url">The URL.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Get``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified URL and return the JSON data as object
            with optional authorization token.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">The URL.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.GetBinary(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the binary.
            </summary>
            <param name="url">The URL.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Authenticate(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticate
            </summary>
            <param name="url">The URL.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="ct">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.PostFile(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Posts the file.
            </summary>
            <param name="url">The URL.</param>
            <param name="image">The image.</param>
            <param name="fileName">Name of the file.</param>
            <param name="authorization">The authorization.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpClient">
            <summary>
            Represents a basic SMTP client that is capable of submitting messages to an SMTP server.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpClient" /> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.Credentials">
            <summary>
            Gets or sets the credentials. No credentials will be used if set to null.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.Host">
            <summary>
            Gets or sets the hostname to connect to.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.Port">
            <summary>
            Gets or sets the port on which the server expects the connection.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.EnableSsl">
            <summary>
            Gets or sets a value indicating whether the SSL is enabled.
            If set to false, communication between client and server will not be secured.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.ClientHostname">
            <summary>
            Gets or sets the name of the client that gets announced to the server.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.ValidateReply(System.String,System.String)">
            <summary>
            Parses and verifies the server reply. If the reply is not positive or cannot be parsed,
            it will throw an SmtpException
            </summary>
            <param name="replyText">The reply text.</param>
            <param name="sessionId">The session id.</param>
            <returns></returns>
            <exception cref="T:Unosquare.Swan.SmtpException">
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.SendMailAsync(Unosquare.Swan.Networking.SmtpSessionState,System.String)">
            <summary>
            Sends an email message using a session state object.
            Credentials, Enable SSL and Client Hostname are NOT taken from the state object but
            rather from the properties of this class.
            </summary>
            <param name="sessionState">The state.</param>
            <param name="sessionId">The session identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.SendMailAsync(System.Collections.Generic.IEnumerable{Unosquare.Swan.Networking.SmtpSessionState},System.String)">
            <summary>
            Sends an array of email messages using a session state object.
            Credentials, Enable SSL and Client Hostname are NOT taken from the state object but 
            rather from the properties of this class.
            </summary>
            <param name="sessionStates">The session states.</param>
            <param name="sessionId">The session identifier.</param>
            <returns></returns>
            <exception cref="T:System.Security.SecurityException">Could not upgrade the channel to SSL.</exception>
            <exception cref="T:Unosquare.Swan.SmtpException"></exception>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpServerReply">
            <summary>
            Represents an SMTP server response object
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.#ctor(System.Int32,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpServerReply"/> class.
            </summary>
            <param name="responseCode">The response code.</param>
            <param name="statusCode">The status code.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpServerReply"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpServerReply"/> class.
            </summary>
            <param name="responseCode">The response code.</param>
            <param name="statusCode">The status code.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpServerReply"/> class.
            </summary>
            <param name="responseCode">The response code.</param>
            <param name="content">The content.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.ReplyCodeSeverity">
            <summary>
            Gets the response severity.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.ReplyCodeCategory">
            <summary>
            Gets the response category.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.ReplyCode">
            <summary>
            Gets the numeric response code.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.EnhancedStatusCode">
            <summary>
            Gets the enhanced status code.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.IsValid">
            <summary>
            Returns true if the response code is between 200 and 599
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.IsPositive">
            <summary>
            Gets a value indicating whether this instance is positive.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.Parse(System.String)">
            <summary>
            Parses the specified text into a Server Reply for thorough analysis.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.CommandUnrecognized">
            <summary>
            Gets the command unrecognized reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.SyntaxErrorArguments">
            <summary>
            Gets the syntax error arguments reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.CommandNotImplemented">
            <summary>
            Gets the command not implemented reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.BadSequenceOfCommands">
            <summary>
            Gets the bad sequence of commands reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.ProtocolViolation">
            <summary>
            Gets the protocol violation reply.
            </summary>=
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.SystemStatusBye">
            <summary>
            Gets the system status bye reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.SystemStatusHelp">
            <summary>
            Gets the system status help reply.
            </summary>=
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.BadSyntaxCommandEmpty">
            <summary>
            Gets the bad syntax command empty reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.Ok">
            <summary>
            Gets the OK reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.AuthorizationRequired">
            <summary>
            Gets the authorization required reply.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpSessionState">
            <summary>
            Represents the state of an SMTP session associated with a client
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpSessionState.m_Recipients">
            <summary>
            The internally accessible list of recipients
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpSessionState"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.DataBuffer">
            <summary>
            Gets the contents of the data buffer.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.HasInitiated">
            <summary>
            Gets or sets a value indicating whether this instance has initiated.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.SupportsExtensions">
            <summary>
            Gets or sets a value indicating whether the current session supports extensions.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.ClientHostname">
            <summary>
            Gets or sets the client hostname.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.IsInDataMode">
            <summary>
            Gets or sets a value indicating whether the session is currently receiving DATA
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.SenderAddress">
            <summary>
            Gets or sets the sender address.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.Recipients">
            <summary>
            Gets the recipients.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.ExtendedData">
            <summary>
            Gets or sets the extended data supporting any additional field for storage by a responder implementation.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.IsInAuthMode">
            <summary>
            Gets or sets a value indicating whether this instance is in authentication mode.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.HasProvidedUsername">
            <summary>
            Gets a value indicating whether this instance has provided username.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether this instance is authenticated.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.AuthMode">
            <summary>
            Gets or sets the authentication mode.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.IsChannelSecure">
            <summary>
            Gets or sets a value indicating whether this instance is channel secure.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.ResetAuthentication">
            <summary>
            Resets the authentication state.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.ResetEmail">
            <summary>
            Resets the data mode to false, clears the recipients, the sender address and the data buffer
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.Reset(System.Boolean)">
            <summary>
            Resets the state table entirely
            </summary>
            <param name="clearExtensionData">if set to <c>true</c> [clear extension data].</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.SnmpClient">
            <summary>
            Represents a little SNMP client based on http://www.java2s.com/Code/CSharp/Network/SimpleSNMP.htm
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.Discover(System.Int32)">
            <summary>
            Discovers the specified SNMP time out.
            </summary>
            <param name="snmpTimeOut">The SNMP time out.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.GetPublicName(System.Net.IPEndPoint)">
            <summary>
            Gets the name of the public.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.GetUptime(System.Net.IPEndPoint,System.String)">
            <summary>
            Gets the uptime.
            </summary>
            <param name="host">The host.</param>
            <param name="mibstring">The mibstring.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.GetString(System.Net.IPEndPoint,System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="host">The host.</param>
            <param name="mibstring">The mibstring.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.Get(System.Net.IPEndPoint,System.String)">
            <summary>
            Gets the specified host.
            </summary>
            <param name="host">The host.</param>
            <param name="mibstring">The mibstring.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.Get(System.String,System.Net.IPEndPoint,System.String,System.String)">
            <summary>
            Gets the specified request.
            </summary>
            <param name="request">The request.</param>
            <param name="host">The host.</param>
            <param name="community">The community.</param>
            <param name="mibstring">The mibstring.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Reflection.AppDomain">
            <summary>
            Represents a polyfill class to replace interoperability with .net core
            Idea taken from: http://www.michael-whelan.net/replacing-appdomain-in-dotnet-core/
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Reflection.AppDomain._dependencyContext">
            <summary>
            The dependency context
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.AppDomain.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.Swan.Reflection.AppDomain"/> class from being created.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.AppDomain.CurrentDomain">
            <summary>
            Gets the current domain.
            </summary>
            <value>
            The current domain.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Reflection.AppDomain.GetAssemblies">
            <summary>
            Gets all the assemblies in the current app domain.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.AppDomain.GetDependencyContext">
            <summary>
            Gets the dependency context.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Unosquare.Swan.Reflection.AppDomain.GetRuntimeTarget">
            <summary>
            Gets the get runtime target.
            </summary>
            <value>
            The get runtime target.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Reflection.AppDomain.GetRuntimeAssemblies">
            <summary>
            Gets the runtime assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Reflection.AssemblyInfo">
            <summary>
            Represents an Assembly information object
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.AssemblyInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.AssemblyInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.AssemblyInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.AssemblyInfo"/> class.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="T:Unosquare.Swan.Reflection.ExtendedPropertyInfo">
            <summary>
            Represents a Property object from a Object Reflection Property with extended values
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.ExtendedPropertyInfo`1"/> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.Property">
            <summary>
            Gets or sets the property.
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Reflection.ExtendedPropertyInfo`1">
            <summary>
            Represents a Property object from a Object Reflection Property with extended values
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedPropertyInfo`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.ExtendedPropertyInfo`1"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="T:Unosquare.Swan.Reflection.ExtendedTypeInfo">
            <summary>
            Provides extended information about a type
            This class is mainly used to define sets of types within the Constants class
            and it is not meant for other than querying the VasicTypesInfo dictionary.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.ExtendedTypeInfo"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.Type">
            <summary>
            Gets the type this extended info class provides for.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.IsNullableValueType">
            <summary>
            Gets a value indicating whether the type is a nullable value type.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.IsNumeric">
            <summary>
            Gets a value indicating whether the type or underlying type is numeric.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.IsValueType">
            <summary>
            Gets a value indicating whether the type is value type.
            Nullable value types have this property set to False
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.UnderlyingType">
            <summary>
            When dealing with nullable value types, this property will
            return the underlying value type of the nullable,
            Otherwise it will return the same type as the Type property
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.TryParseMethodInfo">
            <summary>
            Gets the try parse method information. If the type does not contain
            a suitable TryParse static method, it will return null.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.ToStringMethodInfo">
            <summary>
            Gets the ToString method info
            It will prefer the overload containing the IFormatProvider argument
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.CanParseNatively">
            <summary>
            Gets a value indicating whether the type contains a suitable TryParse method.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo.GetDefault">
            <summary>
            Gets the default value of this type. For reference types it return null.
            For value types it returns the default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo.TryParse(System.String,System.Object@)">
            <summary>
            Tries to parse the string into an object of the type this instance represents.
            Returns false when no suitable TryParse methods exists for the type or when parsing fails
            for any reason. When possible, this method uses CultureInfo.InvariantCulture and NumberStyles.Any
            </summary>
            <param name="s">The s.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo.ToStringInvariant(System.Object)">
            <summary>
            Converts this instance to its string representation, 
            trying to use the CultureInfo.InvariantCulture
            IFormat provider if the overload is available
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.Swan.Reflection.ExtendedTypeInfo`1">
            <summary>
            Provides extended information about a type
            This class is mainly used to define sets of types within the Constants class
            and it is not meant for other than querying the VasicTypesInfo dictionary.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.ExtendedTypeInfo`1"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo`1.TryParse(System.String,`0@)">
            <summary>
            Tries to parse the string into an object of the type this instance represents.
            Returns false when no suitable TryParse methods exists for the type or when parsing fails
            for any reason. When possible, this method uses CultureInfo.InvariantCulture and NumberStyles.Any
            </summary>
            <param name="s">The s.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo`1.ToStringInvariant(`0)">
            <summary>
            Converts this instance to its string representation, 
            trying to use the CultureInfo.InvariantCulture
            IFormat provider if the overload is available
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Reflection.PropertyTypeCache">
            <summary>
            A thread-safe cache of properties belonging to a given type
            The Retrieve method is the most useful one in this class as it
            calls the retrieval process if the type is not contained
            in the cache.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.PropertyTypeCache.Contains(System.Type)">
            <summary>
            Determines whether the cache contains the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Unosquare.Swan.Reflection.PropertyTypeCache.Contains``1">
            <summary>
            Determines whether the cache contains the specified type.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.PropertyTypeCache.Retrieve(System.Type,System.Func{System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}})">
            <summary>
            Retrieves the properties stored for the specified type.
            If the properties are not available, it calls the factory method to retrieve them
            and returns them as an array of PropertyInfo
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.PropertyTypeCache.Retrieve``1(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}})">
            <summary>
            Retrieves the properties stored for the specified type.
            If the properties are not available, it calls the factory method to retrieve them
            and returns them as an array of PropertyInfo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="P:Unosquare.Swan.Reflection.PropertyTypeCache.Item(System.Type)">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified type.
            If the properties are not available, it returns null.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </value>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
    </members>
</doc>
